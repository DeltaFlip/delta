{"version":3,"sources":["views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/_baseSum.js","views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ActivityCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","utils/uriToHttp.ts","../node_modules/lodash/_shuffleSelf.js","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/sum.js","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js"],"names":["sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","marketEvent","orderType","AskOrderType","CANCEL","MarketEvent","MODIFY","NEW","getAskOrderEvent","price","askPrice","timestamp","nft","tx","id","seller","transactionHistory","SELL","buyer","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","useAllPancakeBunnyNfts","collectionAddress","useState","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","pancakeBunniesAddress","useEffect","a","getNftsFromCollectionApi","data","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","tokenId","name","description","collectionName","collection","image","attributes","traitType","value","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","module","exports","array","iteratee","result","index","current","undefined","PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","thumbnail","fontSize","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","activeIndex","onItemClick","symbol","BNB","FetchStatus","Fetched","ConnectWalletButton","my","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","allowance","currentAllowance","gt","onApprove","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","maxWidth","NFTMedia","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","Box","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","ManagePancakeBunniesCard","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","totalBunnies","totalBunniesText","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","count","chainId","useActiveWeb3React","ipfsLink","uriToHttp","getBscScanLink","formatNumber","SwiperCircle","isActive","secondary","textDisabled","StyledSwiper","mediaQueries","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","collectionNfts","useNftsFromCollection","isAddress","fetchNftsFromCollections","page","size","nftsToShow","useMemo","shuffle","isTradable","slidesPerView","maxPageIndex","reduce","nftArray","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useFastFresh","isWindowVisible","useIsWindowVisible","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","useGetCollectionDistributionPB","distributionData","isFetchingDistribution","isFetching","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","fetchBasicBunnyData","sortedNfts","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","sum","values","getBunnyIdRarity","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useErc721CollectionContract","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","padding","ActivityCard","currentPage","setCurrentPage","setMaxPages","activitiesSlice","setActivitiesSlice","sortedTokenActivities","setSortedTokenActivities","setIsLoading","isXs","isSm","getTokenActivity","tokenActivity","console","error","fetchTokenActivity","max","getMaxPages","getActivitySlice","TableLoader","activity","ActivityRow","isNftActivity","borderTop","NoNftsImage","OwnerActivityContainer","Flex","IndividualNFTPage","setNft","setIsOwnNft","useGetCollectionDistribution","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","rarityMap","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams","uri","split","substr","hash","match","baseRandom","require","lastIndex","rand","state","setState","prevState","getCollectionDistributionApi","apiResponse","fetchTokens","baseSum","identity","arrayShuffle","baseShuffle","isArray","copyArray","shuffleSelf"],"mappings":"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","file":"static/js/20.4c597009.chunk.js","sourcesContent":["import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortActivity = ({\n  askOrders = [],\n  transactions = [],\n}: {\n  askOrders?: AskOrder[]\n  transactions?: Transaction[]\n}): Activity[] => {\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\n      const marketEvent = MarketEvent.SELL\n      const { timestamp, nft } = transactionHistory\n      const price = transactionHistory.askPrice\n      const tx = transactionHistory.id\n      const buyer = transactionHistory.buyer.id\n      const seller = transactionHistory.seller.id\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\n      const price = askOrderHistory.askPrice\n      const { timestamp, nft } = askOrderHistory\n      const tx = askOrderHistory.id\n      const seller = askOrderHistory?.seller.id\n      return { marketEvent, price, timestamp, nft, tx, seller }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import { TokenMarketData, Image } from 'state/nftMarket/types'\n\nexport enum PaymentCurrency {\n  BNB,\n  WBNB,\n}\n\nexport enum BuyingStage {\n  REVIEW,\n  APPROVE_AND_CONFIRM,\n  CONFIRM,\n  TX_CONFIRMED,\n}\n\nexport interface BuyNFT {\n  collection: {\n    address: string\n    name: string\n  }\n  token: TokenMarketData\n  name: string\n  image: Image\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { BuyingStage } from './types'\n\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `color: ${theme.colors.textSubtle}`\n        : null};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `fill: ${theme.colors.textSubtle}`\n        : null};\n  }\n`\n\nexport const BorderedBox = styled(Grid)`\n  margin: 16px 0;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 8px;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n  isLoading?: boolean\n  isInsufficient?: boolean\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (isLoading) {\n    return (\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\n        <Skeleton width=\"86px\" height=\"20px\" />\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\n      <Flex justifyContent=\"flex-end\">\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`}</Text>\n      </Flex>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { FetchStatus } from 'config/constants/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { BorderedBox, BnbAmountCell } from './styles'\nimport { PaymentCurrency } from './types'\n\ninterface ReviewStageProps {\n  nftToBuy: NftToken\n  paymentCurrency: PaymentCurrency\n  setPaymentCurrency: (index: number) => void\n  nftPrice: number\n  walletBalance: number\n  walletFetchStatus: FetchStatus\n  notEnoughBnbForPurchase: boolean\n  continueToNextStage: () => void\n}\n\nconst ReviewStage: React.FC<ReviewStageProps> = ({\n  nftToBuy,\n  paymentCurrency,\n  setPaymentCurrency,\n  nftPrice,\n  walletBalance,\n  walletFetchStatus,\n  notEnoughBnbForPurchase,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  return (\n    <>\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\n        <Flex>\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {nftToBuy.collectionName}\n            </Text>\n            <Text bold>{nftToBuy.name}</Text>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\n                {t('Token ID:')}\n              </Text>\n              <Button\n                as={Link}\n                scale=\"xs\"\n                px=\"0px\"\n                pt=\"2px\"\n                external\n                variant=\"text\"\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\n              >\n                {nftToBuy.tokenId}\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n        <BorderedBox>\n          <Text small color=\"textSubtle\">\n            {t('Pay with')}\n          </Text>\n          <ButtonMenu\n            activeIndex={paymentCurrency}\n            onItemClick={(index) => setPaymentCurrency(index)}\n            scale=\"sm\"\n            variant=\"subtle\"\n          >\n            <ButtonMenuItem>BNB</ButtonMenuItem>\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\n          </ButtonMenu>\n          <Text small color=\"textSubtle\">\n            {t('Total payment')}\n          </Text>\n          <BnbAmountCell bnbAmount={nftPrice} />\n          <Text small color=\"textSubtle\">\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\n          </Text>\n          {!account ? (\n            <Flex justifySelf=\"flex-end\">\n              <ConnectWalletButton scale=\"sm\" />\n            </Flex>\n          ) : (\n            <BnbAmountCell\n              bnbAmount={walletBalance}\n              isLoading={walletFetchStatus !== FetchStatus.Fetched}\n              isInsufficient={walletFetchStatus === FetchStatus.Fetched && notEnoughBnbForPurchase}\n            />\n          )}\n        </BorderedBox>\n        {walletFetchStatus === FetchStatus.Fetched && notEnoughBnbForPurchase && (\n          <Message p=\"8px\" variant=\"danger\">\n            <Text>\n              {t('Not enough %symbol% to purchase this NFT', {\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\n              })}\n            </Text>\n          </Message>\n        )}\n        <Flex alignItems=\"center\">\n          <Text my=\"16px\" mr=\"4px\">\n            {t('Convert between BNB and WBNB for free')}:\n          </Text>\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href=\"/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n          >\n            {t('Convert')}\n          </Button>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\n        <Button\n          onClick={continueToNextStage}\n          disabled={walletFetchStatus !== FetchStatus.Fetched || notEnoughBnbForPurchase}\n          mb=\"8px\"\n        >\n          {t('Checkout')}\n        </Button>\n        <Button as={Link} external style={{ width: '100%' }} href=\"/swap?outputCurrency=BNB\" variant=\"secondary\">\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ReviewStage\n","import React, { useEffect, useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  useEffect(() => {\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\n      setPaymentCurrency(PaymentCurrency.WBNB)\n      setIsPaymentCurrentInitialized(true)\n    }\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={t(modalTitles[stage])}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n","import React from 'react'\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { Container, CollectionLink } from '../shared/styles'\n\ninterface MainPancakeBunnyCardProps {\n  cheapestNft: NftToken\n  cheapestNftFromOtherSellers?: NftToken\n  nothingForSaleBunny?: NftToken\n}\n\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\n  cheapestNft,\n  cheapestNftFromOtherSellers,\n  nothingForSaleBunny,\n}) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\n\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\n\n  const actionButton = onlyOwnNftsOnSale ? (\n    <Button\n      variant=\"danger\"\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentAdjustPriceModal}\n    >\n      {t('Adjust Sale Price')}\n    </Button>\n  ) : (\n    <Button\n      disabled={onlyOwnNftsOnSale}\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentBuyModal}\n    >\n      {t('Buy')}\n    </Button>\n  )\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\n                {nftToDisplay.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nftToDisplay.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\n                <>\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                    {t('Lowest price')}\n                  </Text>\n                  <Flex alignItems=\"center\" mt=\"8px\">\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\n                      {nftToDisplay.marketData.currentAskPrice}\n                    </Text>\n                    {bnbBusdPrice ? (\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    ) : (\n                      <Skeleton width=\"64px\" />\n                    )}\n                  </Flex>\n                </>\n              )}\n              {hasListings && actionButton}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\n            <NFTMedia nft={nftToDisplay} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainPancakeBunnyCard\n","import React, { useState } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 720px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 710px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n`\n\nconst FullWidthCard = styled(Card)`\n  width: 100%;\n`\n\ninterface ExpandableCardProps {\n  icon: React.ReactNode\n  title: string\n  content: React.ReactNode\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\n  const [expanded, setExpanded] = useState(true)\n  const { theme } = useTheme()\n  return (\n    <FullWidthCard>\n      <Grid\n        gridTemplateColumns=\"1fr 8fr 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        {icon}\n        <Text bold>{title}</Text>\n        <IconButton\n          onClick={() => {\n            setExpanded((prev) => !prev)\n          }}\n          variant=\"text\"\n          maxWidth=\"32px\"\n        >\n          {expanded ? (\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          ) : (\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          )}\n        </IconButton>\n      </Grid>\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\n    </FullWidthCard>\n  )\n}\n\nexport default ExpandableCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst ScrollableContainer = styled(Box)`\n  overflow-y: auto;\n  max-height: 224px;\n`\n\nconst Divider = styled.div`\n  margin: 16px 20px;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n  lowestPrice: string\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {lowestPrice && (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Lowest price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{lowestPrice}</Text>\n            </Flex>\n          </>\n        )}\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectiblesByLocationProps {\n  location: NftLocation\n  nfts: NftToken[]\n  lowestPrice: string\n}\n\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[location]}>\n          {t(location)}\n        </Text>\n      </Grid>\n      <ScrollableContainer>\n        {nfts.map((nft) => (\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\n        ))}\n      </ScrollableContainer>\n    </Flex>\n  )\n}\n\ninterface ManagePancakeBunniesCardProps {\n  bunnyId: string\n  lowestPrice?: string\n}\n\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts()\n\n  const bunniesInWallet = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\n  )\n  const bunniesForSale = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\n  )\n  const profilePicBunny = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\n  )\n\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\n  const useHasNoBunnies =\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\n  const totalBunnies = bunniesInWallet.length + bunniesForSale.length + profilePicBunny.length\n  const totalBunniesText = account && !useHasNoBunnies ? ` (${totalBunnies})` : ''\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {useHasNoBunnies && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have any of this item.')}\n        </Text>\n      )}\n      {account && loading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {bunniesForSale.length > 0 && (\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\n      )}\n      {bunniesInWallet.length > 0 && (\n        <>\n          {bunniesForSale.length > 0 && <Divider />}\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\n        </>\n      )}\n      {profilePicBunny.length > 0 && (\n        <>\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\n        </>\n      )}\n    </Box>\n  )\n  return (\n    <ExpandableCard\n      title={`${t('Manage Yours')}${totalBunniesText}`}\n      icon={<CogIcon width=\"24px\" height=\"24px\" />}\n      content={content}\n    />\n  )\n}\n\nexport default ManagePancakeBunniesCard\n","import React from 'react'\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftAttribute } from 'state/nftMarket/types'\nimport ExpandableCard from './ExpandableCard'\n\ninterface PropertiesCardProps {\n  properties: NftAttribute[]\n  rarity: { [key: string]: number }\n}\n\n// Map of known traits to human-readable text\nconst KNOWN_TRAITS_TEXT = {\n  bunnyId: 'Bunny ID',\n}\n\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\n  title,\n  value,\n  rarity,\n}) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n        {KNOWN_TRAITS_TEXT[title] ?? title}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\n          {value}\n        </Text>\n        {rarity && (\n          <Text small color=\"textSubtle\">\n            ({rarity.toFixed(2)}%)\n          </Text>\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\n  const { t } = useTranslation()\n  const content = (\n    <Box p=\"24px\">\n      {properties.map((property) => (\n        <SingleProperty\n          key={property.traitType}\n          title={property.traitType}\n          value={property.value}\n          rarity={rarity[property.traitType]}\n        />\n      ))}\n    </Box>\n  )\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default PropertiesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport uriToHttp from 'utils/uriToHttp'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ExpandableCard from './ExpandableCard'\n\ninterface DetailsCardProps {\n  contractAddress: string\n  ipfsJson: string\n  count?: number\n  rarity?: number\n}\n\nconst LongTextContainer = styled(Text)`\n  max-width: 120px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson, count, rarity }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const ipfsLink = ipfsJson ? uriToHttp(ipfsJson)[0] : null\n  const content = (\n    <Box p=\"24px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n          {t('Contract address')}\n        </Text>\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\n        </Link>\n      </Flex>\n      {ipfsLink && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            IPFS JSON\n          </Text>\n          <Link external href={ipfsLink}>\n            <LongTextContainer bold>{ipfsLink}</LongTextContainer>\n          </Link>\n        </Flex>\n      )}\n      {count && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" mr=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('Supply Count')}\n          </Text>\n          <LongTextContainer bold>{formatNumber(count, 0, 0)}</LongTextContainer>\n        </Flex>\n      )}\n      {rarity && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mr=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('Rarity')}\n          </Text>\n          <LongTextContainer bold>{`${formatNumber(rarity, 0, 2)}%`}</LongTextContainer>\n        </Flex>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default DetailsCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport shuffle from 'lodash/shuffle'\nimport styled from 'styled-components'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport SwiperCore from 'swiper'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\n\nimport 'swiper/swiper-bundle.css'\n\nconst INITIAL_SLIDE = 4\n\nconst SwiperCircle = styled.div<{ isActive }>`\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\n  width: 12px;\n  height: 12px;\n  margin-right: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n`\n\nconst StyledSwiper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    .swiper-wrapper {\n      max-height: 390px;\n    }\n  }\n`\n\ninterface MoreFromThisCollectionProps {\n  collectionAddress: string\n  currentTokenName?: string\n  title?: string\n}\n\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\n  collectionAddress,\n  currentTokenName = '',\n  title = 'More from this collection',\n}) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\n  const [activeIndex, setActiveIndex] = useState(1)\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\n  const collectionNfts = useNftsFromCollection(collectionAddress)\n\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\n\n  useEffect(() => {\n    if (!isPBCollection && !collectionNfts) {\n      dispatch(\n        fetchNftsFromCollections({\n          collectionAddress: isAddress(collectionAddress) || collectionAddress,\n          page: 1,\n          size: 100,\n        }),\n      )\n    }\n  }, [collectionNfts, collectionAddress, dispatch, isPBCollection])\n\n  let nftsToShow = useMemo(() => {\n    return shuffle(\n      allPancakeBunnyNfts\n        ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\n        : collectionNfts?.filter((nft) => nft.name !== currentTokenName && nft.marketData?.isTradable),\n    )\n  }, [allPancakeBunnyNfts, collectionNfts, currentTokenName])\n\n  if (!nftsToShow || nftsToShow.length === 0) {\n    return null\n  }\n\n  let slidesPerView = 4\n  let maxPageIndex = 3\n\n  if (isMd) {\n    slidesPerView = 2\n    maxPageIndex = 6\n  }\n\n  if (isLg) {\n    slidesPerView = 3\n    maxPageIndex = 4\n  }\n\n  if (isPBCollection) {\n    // PancakeBunnies should display 1 card per bunny id\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\n      const bunnyId = current.attributes[0].value\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\n        nftArray.push(current)\n      }\n      return nftArray\n    }, [])\n  }\n  nftsToShow = nftsToShow.slice(0, 12)\n\n  const nextSlide = () => {\n    if (activeIndex < maxPageIndex - 1) {\n      setActiveIndex((index) => index + 1)\n      swiperRef.slideNext()\n    }\n  }\n\n  const previousSlide = () => {\n    if (activeIndex > 0) {\n      setActiveIndex((index) => index - 1)\n      swiperRef.slidePrev()\n    }\n  }\n\n  const goToSlide = (index: number) => {\n    setActiveIndex(index / slidesPerView)\n    swiperRef.slideTo(index)\n  }\n\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\n  }\n\n  return (\n    <Box pt=\"56px\" mb=\"52px\">\n      {title && (\n        <Text bold mb=\"24px\">\n          {t(title)}\n        </Text>\n      )}\n      {isMobile ? (\n        <StyledSwiper>\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        </StyledSwiper>\n      ) : (\n        <StyledSwiper>\n          <Swiper\n            onSwiper={setSwiperRef}\n            onActiveIndexChange={updateActiveIndex}\n            spaceBetween={16}\n            slidesPerView={slidesPerView}\n            slidesPerGroup={slidesPerView}\n            initialSlide={INITIAL_SLIDE}\n          >\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard\n                  nft={nft}\n                  currentAskPrice={isPBCollection ? null : parseFloat(nft.marketData?.currentAskPrice)}\n                />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\n            <IconButton variant=\"text\" onClick={previousSlide}>\n              <ArrowBackIcon />\n            </IconButton>\n            {[...Array(maxPageIndex).keys()].map((index) => (\n              <SwiperCircle\n                key={index}\n                onClick={() => goToSlide(index * slidesPerView)}\n                isActive={activeIndex === index}\n              />\n            ))}\n            <IconButton variant=\"text\" onClick={nextSlide}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </Flex>\n        </StyledSwiper>\n      )}\n    </Box>\n  )\n}\n\nexport default MoreFromThisCollection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Price } from '@pancakeswap/sdk'\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { ButtonContainer } from '../../shared/styles'\n\nconst OwnersTableRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  & > div {\n    padding-bottom: 16px;\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  }\n`\n\ninterface RowProps {\n  t: ContextApi['t']\n  nft: NftToken\n  bnbBusdPrice: Price\n  account: string\n}\n\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\n\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\n\n  return (\n    <>\n      <Box pl=\"24px\">\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n        </Flex>\n        {bnbBusdPrice ? (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n          </Text>\n        ) : (\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n        )}\n      </Box>\n      <Box>\n        <Flex width=\"max-content\" alignItems=\"center\">\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\n        </Flex>\n      </Box>\n      <ButtonContainer>\n        {ownNft ? (\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\n            {t('Edit')}\n          </Button>\n        ) : (\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\n            {t('Buy')}\n          </Button>\n        )}\n      </ButtonContainer>\n    </>\n  )\n}\n\ninterface ForSaleTableRowsProps {\n  nftsForSale: NftToken[]\n}\n\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n  return (\n    <OwnersTableRow>\n      {nftsForSale.map((nft) => (\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\n      ))}\n    </OwnersTableRow>\n  )\n}\n\nexport default ForSaleTableRow\n","import { Spinner, Text } from '@pancakeswap/uikit'\nimport React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst countdownAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0px;\n  }\n  to {\n    stroke-dashoffset: 113px;\n  }\n`\n\nconst CountdownContainer = styled.div`\n  position: relative;\n  margin: auto;\n  height: 40px;\n  width: 40px;\n  text-align: center;\n\n  & svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 40px;\n    height: 40px;\n    transform: rotateY(-180deg) rotateZ(-90deg);\n\n    & circle {\n      stroke-dasharray: 113px;\n      stroke-dashoffset: 0px;\n      stroke-linecap: round;\n      stroke-width: 2px;\n      stroke: ${({ theme }) => theme.colors.primaryBright};\n      fill: none;\n      animation: ${countdownAnimation} 10s linear infinite forwards;\n    }\n  }\n`\n\ninterface CountdownCircleProps {\n  secondsRemaining: number\n  isUpdating: boolean\n}\n\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\n  if (secondsRemaining < 1 || isUpdating) {\n    return <Spinner size={42} />\n  }\n  return (\n    <CountdownContainer>\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\n        {secondsRemaining}\n      </Text>\n      <svg>\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\n      </svg>\n    </CountdownContainer>\n  )\n}\n\nexport default CountdownCircle\n","import React, { useEffect, useState } from 'react'\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\nimport { useLoadingState } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CountdownCircle from './CountdownCircle'\n\nconst UpdateIndicator = () => {\n  const { t } = useTranslation()\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\n    placement: 'auto',\n  })\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSecondsRemaining((prev) => prev - 1)\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isFetchingMorePancakeBunnies) {\n      setSecondsRemaining(10)\n    }\n  }, [isFetchingMorePancakeBunnies])\n\n  return (\n    <Flex justifyContent=\"center\" ref={targetRef}>\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\n      {tooltipVisible && tooltip}\n    </Flex>\n  )\n}\n\nexport default UpdateIndicator\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Card,\n  Grid,\n  SellIcon,\n  Text,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Button,\n  Spinner,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport ForSaleTableRows from './ForSaleTableRows'\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\nimport UpdateIndicator from './UpdateIndicator'\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\n\nconst ITEMS_PER_PAGE_DESKTOP = 10\nconst ITEMS_PER_PAGE_MOBILE = 5\n\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\n  width: 100%;\n  & > div:first-child {\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaQueries.md} {\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\n    }\n  }\n`\n\ninterface ForSaleTableCardProps {\n  nftsForSale: NftToken[]\n  bunnyId: string\n  totalForSale: number\n  priceSort: 'asc' | 'desc'\n  isFetchingMoreNfts: boolean\n  togglePriceSort: () => void\n  loadMore: (orderDirection: 'asc' | 'desc') => void\n}\n\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\n  nftsForSale,\n  bunnyId,\n  totalForSale,\n  loadMore,\n  isFetchingMoreNfts,\n  priceSort,\n  togglePriceSort,\n}) => {\n  const [page, setPage] = useState(1)\n  const { isMobile } = useMatchBreakpoints()\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  useEffect(() => {\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\n    // Same for reversing sorting direction\n    setPage(1)\n  }, [bunnyId, priceSort])\n\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\n  if (needsExtraPage) {\n    maxPage += 1\n  }\n\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\n  const switchPage = (pageNumber: number) => {\n    setPage(pageNumber)\n  }\n\n  const loadMoreHandler = () => {\n    loadMore(priceSort)\n  }\n\n  const loadMoreButton = isFetchingMoreNfts ? (\n    <Flex width=\"96px\" justifyContent=\"center\">\n      <Spinner size={32} />\n    </Flex>\n  ) : (\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\n      {t('Load more')}\n    </Button>\n  )\n\n  return (\n    <StyledCard hasManyPages={maxPage > 1}>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr 48px\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\n        <UpdateIndicator />\n      </Grid>\n      {nftsOnCurrentPage.length > 0 ? (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\n              <Flex alignItems=\"center\">\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                  {t('Price')}\n                </Text>\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\n              </Flex>\n            </StyledSortButton>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  switchPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              {page === maxPage ? (\n                loadMoreButton\n              ) : (\n                <Arrow\n                  onClick={() => {\n                    switchPage(page === maxPage ? page : page + 1)\n                  }}\n                >\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n                </Arrow>\n              )}\n            </PageButtons>\n          </Flex>\n        </>\n      ) : (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('No items for sale')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ForSaleTableCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useFastFresh } from 'hooks/useRefresh'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../../types'\nimport { TwoColumnsContainer } from '../shared/styles'\n\ninterface IndividualPancakeBunnyPageProps {\n  bunnyId: string\n}\n\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\n  const { account } = useWeb3React()\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\n    useFetchByBunnyIdAndUpdate(bunnyId)\n  const fastRefresh = useFastFresh()\n  const isWindowVisible = useIsWindowVisible()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies && isWindowVisible) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [\n    priceSort,\n    fetchMorePancakeBunnies,\n    isUpdatingPancakeBunnies,\n    latestPancakeBunniesUpdateAt,\n    fastRefresh,\n    isWindowVisible,\n  ])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[bunnyId].name,\n        name: data[bunnyId].name,\n        description: data[bunnyId].description,\n        collectionName: data[bunnyId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[bunnyId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: bunnyId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (!cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, bunnyId])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdCount = () => {\n    if (distributionData && !isFetchingDistribution) {\n      return distributionData[bunnyId]\n    }\n    return null\n  }\n\n  const getBunnyIdRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      const total = sum(Object.values(distributionData))\n      return (distributionData[bunnyId] / total) * 100\n    }\n    return null\n  }\n\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\n\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\n\n  return (\n    <Page>\n      <MainPancakeBunnyCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard\n            contractAddress={pancakeBunniesAddress}\n            ipfsJson={cheapestBunny?.marketData?.metadataUrl}\n            rarity={propertyRarity?.bunnyId}\n            count={getBunnyIdCount()}\n          />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={bunnyId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={pancakeBunniesAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualPancakeBunnyPage\n","type sortBuilder = {\n  priceSort: string\n}\n\nexport const sortNFTsByPriceBuilder =\n  ({ priceSort }: sortBuilder) =>\n  (nftA, nftB) => {\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\n\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\n  }\n","import { BinanceIcon, Box, Button, Card, CardBody, Flex, Skeleton, Text, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport React from 'react'\nimport { NftToken } from 'state/nftMarket/types'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { CollectionLink, Container } from '../shared/styles'\n\ninterface MainNFTCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentSellModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const ownerButtons = (\n    <Flex flexDirection={['column', 'column', 'row']}>\n      <Button\n        disabled={nftIsProfilePic}\n        minWidth=\"168px\"\n        mr=\"16px\"\n        width={['100%', null, 'max-content']}\n        mt=\"24px\"\n        onClick={onPresentSellModal}\n      >\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\n      </Button>\n      {!nft.marketData?.isTradable && (\n        <Button\n          minWidth=\"168px\"\n          variant=\"secondary\"\n          width={['100%', null, 'max-content']}\n          mt=\"24px\"\n          onClick={onEditProfileModal}\n        >\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\n        </Button>\n      )}\n    </Flex>\n  )\n\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\n                {nft.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nft.name}\n              </Text>\n              {nft.description && <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>}\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                {t('Price')}\n              </Text>\n              {currentAskPriceAsNumber > 0 ? (\n                <Flex alignItems=\"center\" mt=\"8px\">\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\n                    {nft.marketData.currentAskPrice}\n                  </Text>\n                  {bnbBusdPrice ? (\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    })} USD)`}</Text>\n                  ) : (\n                    <Skeleton width=\"64px\" />\n                  )}\n                </Flex>\n              ) : (\n                <Text>{t('Not for sale')}</Text>\n              )}\n              {nftIsProfilePic && (\n                <Text color=\"failure\">\n                  {t(\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\n                  )}\n                </Text>\n              )}\n              {isOwnNft && ownerButtons}\n              {!isOwnNft && (\n                <Button\n                  minWidth=\"168px\"\n                  disabled={!nft.marketData?.isTradable}\n                  mr=\"16px\"\n                  width={['100%', null, 'max-content']}\n                  mt=\"24px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\n            <NFTMedia nft={nft} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainNFTCard\n","import React from 'react'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectibleByLocationProps {\n  nft: NftToken\n}\n\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[nft.location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\n          {t(nft.location)}\n        </Text>\n      </Grid>\n      <CollectibleRow key={nft.tokenId} nft={nft} />\n    </Flex>\n  )\n}\n\ninterface ManageNFTsCardProps {\n  nft?: NftToken\n  isLoading: boolean\n  isOwnNft: boolean\n}\n\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const hasThisNft = isOwnNft && nft\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {account && isLoading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {!isLoading && !hasThisNft && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have this item.')}\n        </Text>\n      )}\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManageNFTsCard\n","import { useEffect, useState } from 'react'\nimport { useErc721CollectionContract } from 'hooks/useContract'\nimport { NftToken } from 'state/nftMarket/types'\n\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\n\nconst useNftOwner = (nft: NftToken) => {\n  const [owner, setOwner] = useState(null)\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\n  const collectionContract = useErc721CollectionContract(nft.collectionAddress, false)\n  const currentSeller = nft.marketData?.currentSeller\n  const { tokenId } = nft\n\n  useEffect(() => {\n    const getOwner = async () => {\n      try {\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\n        setOwner(tokenOwner)\n      } catch (error) {\n        setOwner(null)\n      } finally {\n        setIsLoadingOwner(false)\n      }\n    }\n\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\n      setOwner(currentSeller)\n      setIsLoadingOwner(false)\n    } else {\n      getOwner()\n    }\n  }, [currentSeller, collectionContract, tokenId])\n\n  return { owner, isLoadingOwner }\n}\n\nexport default useNftOwner\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { formatNumber } from 'utils/formatBalance'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileCell from '../../../components/ProfileCell'\nimport { ButtonContainer, TableHeading } from '../shared/styles'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  & > div:first-child {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\nconst OwnerRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  margin-bottom: 8px;\n  align-items: center;\n`\n\ninterface OwnerCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const { owner, isLoadingOwner } = useNftOwner(nft)\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\n\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n\n  return (\n    <StyledCard>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('Owner')}</Text>\n      </Grid>\n      {owner && (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <Flex alignItems=\"center\">\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                {t('Price')}\n              </Text>\n            </Flex>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <OwnerRow>\n            <Box pl=\"24px\">\n              {nft.marketData?.isTradable ? (\n                <>\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n                  </Flex>\n                  {bnbBusdPrice ? (\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n                  )}\n                </>\n              ) : (\n                <Flex alignItems=\"center\" height=\"100%\">\n                  <Text>{t('Not for sale')}</Text>\n                </Flex>\n              )}\n            </Box>\n            <Box>\n              <Flex width=\"max-content\" alignItems=\"center\">\n                <ProfileCell accountAddress={owner.toLowerCase()} />\n              </Flex>\n            </Box>\n            <ButtonContainer>\n              {isOwnNft ? (\n                <Button\n                  disabled={nftIsProfilePic}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentAdjustPriceModal}\n                >\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\n                </Button>\n              ) : (\n                <Button\n                  disabled={!nft.marketData?.isTradable}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </ButtonContainer>\n          </OwnerRow>\n        </>\n      )}\n      {isLoadingOwner && <Skeleton />}\n      {!isLoadingOwner && !owner && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" padding=\"24px\">\n          <Text>{t('Owner information is not available for this item')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default OwnerCard\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Card, Text, useMatchBreakpoints, Table, Th, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useAppDispatch } from '../../../../../../state'\nimport NoNftsImage from '../../../components/Activity/NoNftsImage'\nimport TableLoader from '../../../../../../components/TableLoader'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\nimport { getTokenActivity } from '../../../../../../state/nftMarket/helpers'\nimport { sortActivity } from '../../../ActivityHistory/utils/sortActivity'\nimport ActivityRow from '../../../components/Activity/ActivityRow'\n\ninterface ActivityCardProps {\n  nft: NftToken\n}\n\nconst MAX_PER_PAGE = 5\n\nconst ActivityCard: React.FC<ActivityCardProps> = ({ nft }) => {\n  const dispatch = useAppDispatch()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [sortedTokenActivities, setSortedTokenActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    const fetchTokenActivity = async () => {\n      try {\n        const tokenActivity = await getTokenActivity(nft.tokenId, nft.collectionAddress.toLowerCase())\n        setSortedTokenActivities(sortActivity(tokenActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    fetchTokenActivity()\n  }, [nft, dispatch])\n\n  useEffect(() => {\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedTokenActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedTokenActivities.length > 0) {\n      getMaxPages()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedTokenActivities])\n\n  useEffect(() => {\n    const getActivitySlice = () => {\n      const slice = sortedTokenActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedTokenActivities.length > 0) {\n      getActivitySlice()\n    }\n  }, [sortedTokenActivities, currentPage])\n\n  return (\n    <Card>\n      {sortedTokenActivities.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"center\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"center\"> {t('From')}</Th>\n                    <Th textAlign=\"center\"> {t('To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nft}\n                      bnbBusdPrice={bnbBusdPrice}\n                      isNftActivity\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityCard\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport MainNFTCard from './MainNFTCard'\nimport ManageNFTsCard from './ManageNFTsCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport { TwoColumnsContainer } from '../shared/styles'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\nimport OwnerCard from './OwnerCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\nimport ActivityCard from './ActivityCard'\n\ninterface IndividualNFTPageProps {\n  collectionAddress: string\n  tokenId: string\n}\n\nconst OwnerActivityContainer = styled(Flex)`\n  gap: 22px;\n`\n\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\n  const [nft, setNft] = useState<NftToken>(null)\n  const [isOwnNft, setIsOwnNft] = useState(false)\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\n\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts()\n\n  useEffect(() => {\n    const fetchNftData = async () => {\n      setIsOwnNft(false)\n      const metadata = await getNftApi(collectionAddress, tokenId)\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\n      setNft({\n        tokenId,\n        collectionAddress,\n        collectionName: metadata.collection.name,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image,\n        attributes: metadata.attributes,\n        marketData,\n      })\n    }\n    if (!account) {\n      fetchNftData()\n    } else if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n      const nftOwnedByConnectedUser = userNfts.find(\n        (userNft) =>\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\n      )\n      if (nftOwnedByConnectedUser) {\n        // If user is the owner we already have all needed data available\n        setNft(nftOwnedByConnectedUser)\n        setIsOwnNft(true)\n      } else {\n        // Get metadata and market data separately if connected user is not the owner\n        fetchNftData()\n      }\n    }\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\n\n  if (!nft) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const properties = nft.attributes\n\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\n  const nftIsProfilePic = userProfilePicture\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\n    : false\n\n  const getAttributesRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\n        const total = sum(Object.values(distributionData[traitType]))\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\n        const count = distributionData[traitType][nftAttributeValue]\n        const rarity = (count / total) * 100\n        return {\n          ...rarityMap,\n          [traitType]: rarity,\n        }\n      }, {})\n    }\n    return {}\n  }\n\n  return (\n    <Page>\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageNFTsCard\n            nft={nft}\n            isOwnNft={isOwnNft}\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          />\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\n        </Flex>\n        <OwnerActivityContainer flexDirection=\"column\" width=\"100%\">\n          <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n          <ActivityCard nft={nft} />\n        </OwnerActivityContainer>\n      </TwoColumnsContainer>\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n","import React from 'react'\nimport { useParams } from 'react-router'\nimport { pancakeBunniesAddress } from '../../constants'\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\nimport IndividualNFTPage from './OneOfAKindNftPage'\n\nconst IndividualNFTPageRouter = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n  if (isPBCollection) {\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\n  }\n\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\n}\n\nexport default IndividualNFTPageRouter\n","/* eslint-disable no-case-declarations */\n/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'https':\n      return [uri]\n    case 'http':\n      return [`https${uri.substr(4)}`, uri]\n    case 'ipfs':\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    case 'ipns':\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    default:\n      return []\n  }\n}\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","import { useEffect, useState } from 'react'\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\ninterface State {\n  isFetching: boolean\n  data: ApiCollectionDistribution['data']\n}\n\nconst useGetCollectionDistribution = (collectionAddress: string) => {\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setState])\n\n  return state\n}\n\ninterface StatePB {\n  isFetching: boolean\n  data: ApiCollectionDistributionPB['data']\n}\n\nexport const useGetCollectionDistributionPB = () => {\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [setState])\n\n  return state\n}\n\nexport default useGetCollectionDistribution\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n"],"sourceRoot":""}