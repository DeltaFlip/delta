{"version":3,"sources":["components/SearchInput/SearchInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/Select/Select.tsx"],"names":["StyledInput","styled","Input","InputWrapper","div","theme","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","useApproveFarm","lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","a","ethers","constants","MaxUint256","tx","wait","receipt","status","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","pid","account","useWeb3React","useToast","toastSuccess","toastError","pendingTx","setPendingTx","cakePrice","usePriceCakeBusd","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","displayBalance","toFixed","BigNumber","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","eq","Balance","fontSize","decimals","unit","prefix","disabled","logError","fetchFarmUserDataAsync","pids","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceUnits","parseUnits","formatBigNumber","pattern","inputMode","step","min","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","console","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useLpTokenPrice","handleStake","handleUnstake","stakedBalanceBigNumber","lt","useModal","onPresentDeposit","onPresentWithdraw","getBalanceNumber","some","item","pathname","includes","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","exact","activeClassName","p","Page","checked","Select","options","onOptionChange","option","marginLeft","sort","b","renderContent","Loading","src","alt","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","Box","isOpen","boxShadow","DropDownList","ul","ListItem","li","defaultOptionIndex","dropdownRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","handleClickOutside","document","addEventListener","removeEventListener","index","selectedIndex"],"mappings":"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","file":"static/js/46.e1fed8dc.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <InputWrapper>\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\n    </InputWrapper>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            logError(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport { logError } from 'utils/sentry'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        {Number.isFinite(annualRoi) ? (\n          <AnnualRoiContainer\n            alignItems=\"center\"\n            onClick={() => {\n              setShowRoiCalculator(true)\n            }}\n          >\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        ) : (\n          <Skeleton width={60} />\n        )}\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { logError } from 'utils/sentry'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { Button, Flex, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { logError } from 'utils/sentry'\nimport useApproveFarm from '../../hooks/useApproveFarm'\nimport HarvestAction from './HarvestAction'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              logError(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import { AddIcon, Button, Heading, IconButton, MinusIcon, Skeleton, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      logError(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NavLink>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps extends BoxProps {\n  options: OptionProps[]\n  onOptionChange?: (option: OptionProps) => void\n  defaultOptionIndex?: number\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({\n  options,\n  onOptionChange,\n  defaultOptionIndex = 0,\n  ...props\n}) => {\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\n\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\n    setIsOpen(!isOpen)\n    event.stopPropagation()\n  }\n\n  const onOptionClicked = (selectedIndex: number) => () => {\n    setSelectedOptionIndex(selectedIndex)\n    setIsOpen(false)\n\n    if (onOptionChange) {\n      onOptionChange(options[selectedIndex])\n    }\n  }\n\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setIsOpen(false)\n    }\n\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} {...props}>\n      <DropDownHeader onClick={toggling}>\n        <Text>{options[selectedOptionIndex].label}</Text>\n      </DropDownHeader>\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option, index) =>\n            index !== selectedOptionIndex ? (\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n"],"sourceRoot":""}