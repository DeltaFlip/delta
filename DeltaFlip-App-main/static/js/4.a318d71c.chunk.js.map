{"version":3,"sources":["components/SearchModal/CommonBases.tsx","components/SearchModal/ImportRow.tsx","components/SearchModal/CurrencyList.tsx","components/SearchModal/sorting.ts","components/SearchModal/swapSound.ts","components/SearchModal/CurrencySearch.tsx","components/SearchModal/ImportToken.tsx","components/SearchModal/types.ts","components/SearchModal/ManageLists.tsx","components/SearchModal/ManageTokens.tsx","components/SearchModal/Manage.tsx","components/SearchModal/ImportList.tsx","components/SearchModal/CurrencySearchModal.tsx"],"names":["BaseWrapper","styled","div","theme","disable","colors","dropdown","background","CommonBases","chainId","onSelect","selectedCurrency","t","useTranslation","gap","fontSize","QuestionHelper","text","ml","onClick","currencyEquals","ETHER","currency","style","marginRight","SUGGESTED_BASES","map","token","selected","Token","address","symbol","TokenSection","dim","CheckIcon","CheckmarkCircleIcon","success","NameOverflow","ImportRow","showImportView","setImportToken","useActiveWeb3React","inactiveTokenList","useCombinedInactiveList","list","isAdded","useIsUserAddedToken","isActive","useIsTokenActive","CurrencyLogo","size","opacity","color","title","name","logoURI","small","mr","minWidth","width","currencyKey","StyledBalanceText","Text","FixedContentRow","Balance","balance","toExact","toSignificant","MenuItem","RowBetween","disabled","CurrencyRow","isSelected","otherSelected","account","key","selectedTokenList","useCombinedActiveList","isOnSelectedList","isTokenOnList","customAdded","useCurrencyBalance","undefined","className","Column","bold","ellipsis","maxWidth","justifySelf","CircleLoader","CurrencyList","height","currencies","onCurrencySelect","otherCurrency","fixedListRef","showETH","breakIndex","itemData","useMemo","formatted","Currency","slice","length","inactiveTokens","useAllInactiveTokens","Row","useCallback","data","index","Boolean","wrappedCurrency","showImport","Object","keys","includes","padding","borderRadius","itemKey","ref","itemCount","itemSize","useTokenComparator","swapSound","inverted","balances","useAllTokenBalances","comparator","tokenA","tokenB","balanceA","balanceB","balanceComp","greaterThan","equalTo","toLowerCase","getTokenComparator","CurrencySearch","otherSelectedCurrency","showCommonBases","fixedList","useRef","useState","searchQuery","setSearchQuery","debouncedQuery","useDebounce","invertSearchOrder","allTokens","useAllTokens","searchToken","useToken","searchTokenIsAdded","useAudioModeManager","audioPlay","s","trim","tokenComparator","filteredTokens","filterTokens","values","sortedTokens","sort","filteredSortedTokens","useSortedTokensByQuery","handleCurrencySelect","Audio","play","inputRef","useEffect","current","focus","handleInput","event","input","target","value","checksummedInput","isAddress","scrollTo","handleEnter","e","useFoundOnInactiveList","filteredInactiveTokens","id","placeholder","scale","autoComplete","onChange","onKeyDown","margin","concat","textAlign","mb","ImportToken","CurrencyModalView","tokens","confirmed","setConfirmed","addToken","useAddUserToken","variant","truncateHash","gridTemplateRows","gridGap","outline","startIcon","alignItems","justifyContent","href","getBscScanLink","external","type","checked","userSelect","Wrapper","RowWrapper","active","tertiary","listUrlRowHTMLId","listUrl","replace","ListRow","memo","version","listsByUrl","useSelector","state","lists","byUrl","dispatch","useDispatch","pending","pendingUpdate","useIsListActive","handleAcceptListUpdate","acceptListUpdate","handleRemoveList","window","confirm","removeList","handleEnableList","enableList","handleDisableList","disableList","useTooltip","major","minor","patch","placement","trigger","targetRef","tooltip","tooltipVisible","alt","flex","mt","textTransform","ListContainer","ManageLists","setModalView","setImportList","setListUrl","listUrlInput","setListUrlInput","useAllLists","activeListUrls","useActiveListUrls","activeCopy","setActiveCopy","fetchList","useFetchListCallback","validUrl","uriToHttp","parseENSAddress","sortedLists","filter","UNSUPPORTED_LIST_URLS","u1","u2","l1","l2","tempList","setTempList","addError","setAddError","a","then","catch","fetchTempList","isImported","handleImport","importList","textOverflow","overflow","paddingTop","Card","marginLeft","Footer","ManageTokens","userAddedTokens","useUserAddedTokens","removeToken","useRemoveUserAddedToken","handleRemoveAll","tokenList","isAddressValid","isWarning","importToken","StyledButtonMenu","ButtonMenu","Manage","showLists","setShowLists","activeIndex","onItemClick","prev","TextDot","ImportList","listURL","onImport","useTheme","adding","loadingRequestId","handleAddList","error","message","flexDirection","failure","backgroundAlt","StyledModalContainer","ModalContainer","StyledModalBody","ModalBody","CurrencySearchModal","onDismiss","search","modalView","prevView","usePrevious","config","onBack","manage"],"mappings":"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","file":"static/js/4.a318d71c.chunk.js","sourcesContent":["import React from 'react'\nimport { ChainId, Currency, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { SUGGESTED_BASES } from '../../config/constants'\nimport { AutoColumn } from '../Layout/Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\n\nconst BaseWrapper = styled.div<{ disable?: boolean }>`\n  border: 1px solid ${({ theme, disable }) => (disable ? 'transparent' : theme.colors.dropdown)};\n  border-radius: 10px;\n  display: flex;\n  padding: 6px;\n\n  align-items: center;\n  :hover {\n    cursor: ${({ disable }) => !disable && 'pointer'};\n    background-color: ${({ theme, disable }) => !disable && theme.colors.background};\n  }\n\n  background-color: ${({ theme, disable }) => disable && theme.colors.dropdown};\n  opacity: ${({ disable }) => disable && '0.4'};\n`\n\nexport default function CommonBases({\n  chainId,\n  onSelect,\n  selectedCurrency,\n}: {\n  chainId?: ChainId\n  selectedCurrency?: Currency | null\n  onSelect: (currency: Currency) => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow>\n        <Text fontSize=\"14px\">{t('Common bases')}</Text>\n        <QuestionHelper text={t('These tokens are commonly paired with other tokens.')} ml=\"4px\" />\n      </AutoRow>\n      <AutoRow gap=\"auto\">\n        <BaseWrapper\n          onClick={() => {\n            if (!selectedCurrency || !currencyEquals(selectedCurrency, ETHER)) {\n              onSelect(ETHER)\n            }\n          }}\n          disable={selectedCurrency === ETHER}\n        >\n          <CurrencyLogo currency={ETHER} style={{ marginRight: 8 }} />\n          <Text>BNB</Text>\n        </BaseWrapper>\n        {(chainId ? SUGGESTED_BASES[chainId] : []).map((token: Token) => {\n          const selected = selectedCurrency instanceof Token && selectedCurrency.address === token.address\n          return (\n            <BaseWrapper onClick={() => !selected && onSelect(token)} disable={selected} key={token.address}>\n              <CurrencyLogo currency={token} style={{ marginRight: 8 }} />\n              <Text>{token.symbol}</Text>\n            </BaseWrapper>\n          )\n        })}\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n","import React, { CSSProperties } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Button, Text, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport { AutoRow, RowFixed } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { ListLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport styled from 'styled-components'\nimport { useIsUserAddedToken, useIsTokenActive } from 'hooks/Tokens'\nimport { useTranslation } from 'contexts/Localization'\n\nconst TokenSection = styled.div<{ dim?: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) auto;\n  grid-gap: 16px;\n  align-items: center;\n\n  opacity: ${({ dim }) => (dim ? '0.4' : '1')};\n`\n\nconst CheckIcon = styled(CheckmarkCircleIcon)`\n  height: 16px;\n  width: 16px;\n  margin-right: 6px;\n  stroke: ${({ theme }) => theme.colors.success};\n`\n\nconst NameOverflow = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 140px;\n  font-size: 12px;\n`\n\nexport default function ImportRow({\n  token,\n  style,\n  dim,\n  showImportView,\n  setImportToken,\n}: {\n  token: Token\n  style?: CSSProperties\n  dim?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}) {\n  // globals\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // check if token comes from list\n  const inactiveTokenList = useCombinedInactiveList()\n  const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n\n  // check if already active on list or local storage tokens\n  const isAdded = useIsUserAddedToken(token)\n  const isActive = useIsTokenActive(token)\n\n  return (\n    <TokenSection style={style}>\n      <CurrencyLogo currency={token} size=\"24px\" style={{ opacity: dim ? '0.6' : '1' }} />\n      <AutoColumn gap=\"4px\" style={{ opacity: dim ? '0.6' : '1' }}>\n        <AutoRow>\n          <Text>{token.symbol}</Text>\n          <Text color=\"textDisabled\" ml=\"8px\">\n            <NameOverflow title={token.name}>{token.name}</NameOverflow>\n          </Text>\n        </AutoRow>\n        {list && list.logoURI && (\n          <RowFixed>\n            <Text small mr=\"4px\" color=\"textSubtle\">\n              {t('via')} {list.name}\n            </Text>\n            <ListLogo logoURI={list.logoURI} size=\"12px\" />\n          </RowFixed>\n        )}\n      </AutoColumn>\n      {!isActive && !isAdded ? (\n        <Button\n          width=\"fit-content\"\n          onClick={() => {\n            if (setImportToken) {\n              setImportToken(token)\n            }\n            showImportView()\n          }}\n        >\n          {t('Import')}\n        </Button>\n      ) : (\n        <RowFixed style={{ minWidth: 'fit-content' }}>\n          <CheckIcon />\n          <Text color=\"success\">Active</Text>\n        </RowFixed>\n      )}\n    </TokenSection>\n  )\n}\n","import React, { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { FixedSizeList } from 'react-window'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { LightGreyCard } from 'components/Card'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedActiveList } from '../../state/lists/hooks'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport { useIsUserAddedToken, useAllInactiveTokens } from '../../hooks/Tokens'\nimport Column from '../Layout/Column'\nimport { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\nimport CircleLoader from '../Loader/CircleLoader'\nimport { isTokenOnList } from '../../utils'\nimport ImportRow from './ImportRow'\n\nfunction currencyKey(currency: Currency): string {\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`\n\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`\n\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\n}\n\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n  pointer-events: ${({ disabled }) => disabled && 'none'};\n  :hover {\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.background};\n  }\n  opacity: ${({ disabled, selected }) => (disabled || selected ? 0.5 : 1)};\n`\n\nfunction CurrencyRow({\n  currency,\n  onSelect,\n  isSelected,\n  otherSelected,\n  style,\n}: {\n  currency: Currency\n  onSelect: () => void\n  isSelected: boolean\n  otherSelected: boolean\n  style: CSSProperties\n}) {\n  const { account } = useActiveWeb3React()\n  const key = currencyKey(currency)\n  const selectedTokenList = useCombinedActiveList()\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency)\n  const customAdded = useIsUserAddedToken(currency)\n  const balance = useCurrencyBalance(account ?? undefined, currency)\n\n  // only show add or remove buttons if not on selected list\n  return (\n    <MenuItem\n      style={style}\n      className={`token-item-${key}`}\n      onClick={() => (isSelected ? null : onSelect())}\n      disabled={isSelected}\n      selected={otherSelected}\n    >\n      <CurrencyLogo currency={currency} size=\"24px\" />\n      <Column>\n        <Text bold>{currency.symbol}</Text>\n        <Text color=\"textSubtle\" small ellipsis maxWidth=\"200px\">\n          {!isOnSelectedList && customAdded && 'Added by user •'} {currency.name}\n        </Text>\n      </Column>\n      <RowFixed style={{ justifySelf: 'flex-end' }}>\n        {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\n      </RowFixed>\n    </MenuItem>\n  )\n}\n\nexport default function CurrencyList({\n  height,\n  currencies,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showETH,\n  showImportView,\n  setImportToken,\n  breakIndex,\n}: {\n  height: number\n  currencies: Currency[]\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherCurrency?: Currency | null\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\n  showETH: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n  breakIndex: number | undefined\n}) {\n  const itemData: (Currency | undefined)[] = useMemo(() => {\n    let formatted: (Currency | undefined)[] = showETH ? [Currency.ETHER, ...currencies] : currencies\n    if (breakIndex !== undefined) {\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)]\n    }\n    return formatted\n  }, [breakIndex, currencies, showETH])\n\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const inactiveTokens: {\n    [address: string]: Token\n  } = useAllInactiveTokens()\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Currency = data[index]\n      const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency))\n      const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\n      const handleSelect = () => onCurrencySelect(currency)\n\n      const token = wrappedCurrency(currency, chainId)\n\n      const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\n\n      if (index === breakIndex || !data) {\n        return (\n          <FixedContentRow style={style}>\n            <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\n              <RowBetween>\n                <Text small>{t('Expanded results from inactive Token Lists')}</Text>\n                <QuestionHelper\n                  text={t(\n                    \"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\",\n                  )}\n                  ml=\"4px\"\n                />\n              </RowBetween>\n            </LightGreyCard>\n          </FixedContentRow>\n        )\n      }\n\n      if (showImport && token) {\n        return (\n          <ImportRow style={style} token={token} showImportView={showImportView} setImportToken={setImportToken} dim />\n        )\n      }\n      return (\n        <CurrencyRow\n          style={style}\n          currency={currency}\n          isSelected={isSelected}\n          onSelect={handleSelect}\n          otherSelected={otherSelected}\n        />\n      )\n    },\n    [\n      chainId,\n      inactiveTokens,\n      onCurrencySelect,\n      otherCurrency,\n      selectedCurrency,\n      setImportToken,\n      showImportView,\n      breakIndex,\n      t,\n    ],\n  )\n\n  const itemKey = useCallback((index: number, data: any) => currencyKey(data[index]), [])\n\n  return (\n    <FixedSizeList\n      height={height}\n      ref={fixedListRef as any}\n      width=\"100%\"\n      itemData={itemData}\n      itemCount={itemData.length}\n      itemSize={56}\n      itemKey={itemKey}\n    >\n      {Row}\n    </FixedSizeList>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  }\n  if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  }\n  if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(balances: {\n  [tokenAddress: string]: TokenAmount | undefined\n}): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    if (tokenA.symbol && tokenB.symbol) {\n      // sort by symbol\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n    }\n    return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0\n  }\n}\n\nfunction useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(balances ?? {}), [balances])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    }\n    return comparator\n  }, [inverted, comparator])\n}\n\nexport default useTokenComparator\n","let swapSound: HTMLAudioElement\nexport const getSwapSound = () => {\n  if (!swapSound) {\n    swapSound = new Audio('swap.mp3')\n  }\n  return swapSound\n}\n","import React, { KeyboardEvent, RefObject, useCallback, useMemo, useRef, useState, useEffect } from 'react'\nimport { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text, Input, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { FixedSizeList } from 'react-window'\nimport { useAudioModeManager } from 'state/user/hooks'\nimport useDebounce from 'hooks/useDebounce'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useAllTokens, useToken, useIsUserAddedToken, useFoundOnInactiveList } from '../../hooks/Tokens'\nimport { isAddress } from '../../utils'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport Row from '../Layout/Row'\nimport CommonBases from './CommonBases'\nimport CurrencyList from './CurrencyList'\nimport { filterTokens, useSortedTokensByQuery } from './filtering'\nimport useTokenComparator from './sorting'\nimport { getSwapSound } from './swapSound'\n\nimport ImportRow from './ImportRow'\n\ninterface CurrencySearchProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}\n\nfunction CurrencySearch({\n  selectedCurrency,\n  onCurrencySelect,\n  otherSelectedCurrency,\n  showCommonBases,\n  showImportView,\n  setImportToken,\n}: CurrencySearchProps) {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n\n  // refs for fixed size lists\n  const fixedList = useRef<FixedSizeList>()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const debouncedQuery = useDebounce(searchQuery, 200)\n\n  const [invertSearchOrder] = useState<boolean>(false)\n\n  const allTokens = useAllTokens()\n\n  // if they input an address, use it\n  const searchToken = useToken(debouncedQuery)\n  const searchTokenIsAdded = useIsUserAddedToken(searchToken)\n\n  const [audioPlay] = useAudioModeManager()\n\n  const showETH: boolean = useMemo(() => {\n    const s = debouncedQuery.toLowerCase().trim()\n    return s === '' || s === 'b' || s === 'bn' || s === 'bnb'\n  }, [debouncedQuery])\n\n  const tokenComparator = useTokenComparator(invertSearchOrder)\n\n  const filteredTokens: Token[] = useMemo(() => {\n    return filterTokens(Object.values(allTokens), debouncedQuery)\n  }, [allTokens, debouncedQuery])\n\n  const sortedTokens: Token[] = useMemo(() => {\n    return filteredTokens.sort(tokenComparator)\n  }, [filteredTokens, tokenComparator])\n\n  const filteredSortedTokens = useSortedTokensByQuery(sortedTokens, debouncedQuery)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onCurrencySelect(currency)\n      if (audioPlay) {\n        getSwapSound().play()\n      }\n    },\n    [audioPlay, onCurrencySelect],\n  )\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n\n  useEffect(() => {\n    inputRef.current.focus()\n  }, [])\n\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n    fixedList.current?.scrollTo(0)\n  }, [])\n\n  const handleEnter = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const s = debouncedQuery.toLowerCase().trim()\n        if (s === 'bnb') {\n          handleCurrencySelect(ETHER)\n        } else if (filteredSortedTokens.length > 0) {\n          if (\n            filteredSortedTokens[0].symbol?.toLowerCase() === debouncedQuery.trim().toLowerCase() ||\n            filteredSortedTokens.length === 1\n          ) {\n            handleCurrencySelect(filteredSortedTokens[0])\n          }\n        }\n      }\n    },\n    [filteredSortedTokens, handleCurrencySelect, debouncedQuery],\n  )\n\n  // if no results on main list, show option to expand into inactive\n  const inactiveTokens = useFoundOnInactiveList(debouncedQuery)\n  const filteredInactiveTokens: Token[] = useSortedTokensByQuery(inactiveTokens, debouncedQuery)\n\n  return (\n    <>\n      <div>\n        <AutoColumn gap=\"16px\">\n          <Row>\n            <Input\n              id=\"token-search-input\"\n              placeholder={t('Search name or paste address')}\n              scale=\"lg\"\n              autoComplete=\"off\"\n              value={searchQuery}\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              onKeyDown={handleEnter}\n            />\n          </Row>\n          {showCommonBases && (\n            <CommonBases chainId={chainId} onSelect={handleCurrencySelect} selectedCurrency={selectedCurrency} />\n          )}\n        </AutoColumn>\n        {searchToken && !searchTokenIsAdded ? (\n          <Column style={{ padding: '20px 0', height: '100%' }}>\n            <ImportRow token={searchToken} showImportView={showImportView} setImportToken={setImportToken} />\n          </Column>\n        ) : filteredSortedTokens?.length > 0 || filteredInactiveTokens?.length > 0 ? (\n          <Box margin=\"24px -24px\">\n            <CurrencyList\n              height={390}\n              showETH={showETH}\n              currencies={\n                filteredInactiveTokens ? filteredSortedTokens.concat(filteredInactiveTokens) : filteredSortedTokens\n              }\n              breakIndex={inactiveTokens && filteredSortedTokens ? filteredSortedTokens.length : undefined}\n              onCurrencySelect={handleCurrencySelect}\n              otherCurrency={otherSelectedCurrency}\n              selectedCurrency={selectedCurrency}\n              fixedListRef={fixedList}\n              showImportView={showImportView}\n              setImportToken={setImportToken}\n            />\n          </Box>\n        ) : (\n          <Column style={{ padding: '20px', height: '100%' }}>\n            <Text color=\"textSubtle\" textAlign=\"center\" mb=\"20px\">\n              {t('No results found.')}\n            </Text>\n          </Column>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default CurrencySearch\n","import React, { useState } from 'react'\nimport { Token, Currency } from '@pancakeswap/sdk'\nimport { Button, Text, ErrorIcon, Flex, Message, Checkbox, Link, Tag, Grid } from '@pancakeswap/uikit'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { useAddUserToken } from 'state/user/hooks'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport { ListLogo } from 'components/Logo'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  tokens: Token[]\n  handleCurrencySelect?: (currency: Currency) => void\n}\n\nfunction ImportToken({ tokens, handleCurrencySelect }: ImportProps) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [confirmed, setConfirmed] = useState(false)\n\n  const addToken = useAddUserToken()\n\n  // use for showing import source on inactive tokens\n  const inactiveTokenList = useCombinedInactiveList()\n\n  return (\n    <AutoColumn gap=\"lg\">\n      <Message variant=\"warning\">\n        <Text>\n          {t(\n            'Anyone can create a BEP20 token on BSC with any name, including creating fake versions of existing tokens and tokens that claim to represent projects that do not have a token.',\n          )}\n          <br />\n          <br />\n          {t('If you purchase an arbitrary token, you may be unable to sell it back.')}\n        </Text>\n      </Message>\n\n      {tokens.map((token) => {\n        const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n        const address = token.address ? `${truncateHash(token.address)}` : null\n        return (\n          <Grid key={token.address} gridTemplateRows=\"1fr 1fr 1fr\" gridGap=\"4px\">\n            {list !== undefined ? (\n              <Tag\n                variant=\"success\"\n                outline\n                scale=\"sm\"\n                startIcon={list.logoURI && <ListLogo logoURI={list.logoURI} size=\"12px\" />}\n              >\n                {t('via')} {list.name}\n              </Tag>\n            ) : (\n              <Tag variant=\"failure\" outline scale=\"sm\" startIcon={<ErrorIcon color=\"failure\" />}>\n                {t('Unknown Source')}\n              </Tag>\n            )}\n            <Flex alignItems=\"center\">\n              <Text mr=\"8px\">{token.name}</Text>\n              <Text>({token.symbol})</Text>\n            </Flex>\n            {chainId && (\n              <Flex justifyContent=\"space-between\" width=\"100%\">\n                <Text mr=\"4px\">{address}</Text>\n                <Link href={getBscScanLink(token.address, 'address', chainId)} external>\n                  ({t('View on BscScan')})\n                </Link>\n              </Flex>\n            )}\n          </Grid>\n        )\n      })}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex alignItems=\"center\" onClick={() => setConfirmed(!confirmed)}>\n          <Checkbox\n            scale=\"sm\"\n            name=\"confirmed\"\n            type=\"checkbox\"\n            checked={confirmed}\n            onChange={() => setConfirmed(!confirmed)}\n          />\n          <Text ml=\"8px\" style={{ userSelect: 'none' }}>\n            {t('I understand')}\n          </Text>\n        </Flex>\n        <Button\n          variant=\"danger\"\n          disabled={!confirmed}\n          onClick={() => {\n            tokens.map((token) => addToken(token))\n            if (handleCurrencySelect) {\n              handleCurrencySelect(tokens[0])\n            }\n          }}\n          className=\".token-dismiss-button\"\n        >\n          {t('Import')}\n        </Button>\n      </Flex>\n    </AutoColumn>\n  )\n}\n\nexport default ImportToken\n","export enum CurrencyModalView {\n  search,\n  manage,\n  importToken,\n  importList,\n}\n\nexport default CurrencyModalView\n","import React, { memo, useCallback, useMemo, useState, useEffect } from 'react'\nimport { Button, Text, CheckmarkIcon, CogIcon, Input, Toggle, LinkExternal, useTooltip } from '@pancakeswap/uikit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport Card from 'components/Card'\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\nimport { parseENSAddress } from 'utils/ENS/parseENSAddress'\nimport { useTranslation } from 'contexts/Localization'\nimport useFetchListCallback from '../../hooks/useFetchListCallback'\n\nimport { AppDispatch, AppState } from '../../state'\nimport { acceptListUpdate, removeList, disableList, enableList } from '../../state/lists/actions'\nimport { useIsListActive, useAllLists, useActiveListUrls } from '../../state/lists/hooks'\nimport uriToHttp from '../../utils/uriToHttp'\n\nimport Column, { AutoColumn } from '../Layout/Column'\nimport { ListLogo } from '../Logo'\nimport Row, { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyModalView } from './types'\n\nfunction listVersionLabel(version: Version): string {\n  return `v${version.major}.${version.minor}.${version.patch}`\n}\n\nconst Wrapper = styled(Column)`\n  width: 100%;\n  height: 100%;\n`\n\nconst RowWrapper = styled(Row)<{ active: boolean }>`\n  background-color: ${({ active, theme }) => (active ? `${theme.colors.success}19` : 'transparent')};\n  border: solid 1px;\n  border-color: ${({ active, theme }) => (active ? theme.colors.success : theme.colors.tertiary)};\n  transition: 200ms;\n  align-items: center;\n  padding: 1rem;\n  border-radius: 20px;\n`\n\nfunction listUrlRowHTMLId(listUrl: string) {\n  return `list-row-${listUrl.replace(/\\./g, '-')}`\n}\n\nconst ListRow = memo(function ListRow({ listUrl }: { listUrl: string }) {\n  const listsByUrl = useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\n  const dispatch = useDispatch<AppDispatch>()\n  const { current: list, pendingUpdate: pending } = listsByUrl[listUrl]\n\n  const isActive = useIsListActive(listUrl)\n\n  const { t } = useTranslation()\n\n  const handleAcceptListUpdate = useCallback(() => {\n    if (!pending) return\n    dispatch(acceptListUpdate(listUrl))\n  }, [dispatch, listUrl, pending])\n\n  const handleRemoveList = useCallback(() => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm('Please confirm you would like to remove this list')) {\n      dispatch(removeList(listUrl))\n    }\n  }, [dispatch, listUrl])\n\n  const handleEnableList = useCallback(() => {\n    dispatch(enableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const handleDisableList = useCallback(() => {\n    dispatch(disableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <div>\n      <Text>{list && listVersionLabel(list.version)}</Text>\n      <LinkExternal external href={`https://tokenlists.org/token-list?url=${listUrl}`}>\n        {t('See')}\n      </LinkExternal>\n      <Button variant=\"danger\" scale=\"xs\" onClick={handleRemoveList} disabled={Object.keys(listsByUrl).length === 1}>\n        {t('Remove')}\n      </Button>\n      {pending && (\n        <Button variant=\"text\" onClick={handleAcceptListUpdate} style={{ fontSize: '12px' }}>\n          {t('Update list')}\n        </Button>\n      )}\n    </div>,\n    { placement: 'right-end', trigger: 'click' },\n  )\n\n  if (!list) return null\n\n  return (\n    <RowWrapper active={isActive} key={listUrl} id={listUrlRowHTMLId(listUrl)}>\n      {tooltipVisible && tooltip}\n      {list.logoURI ? (\n        <ListLogo size=\"40px\" style={{ marginRight: '1rem' }} logoURI={list.logoURI} alt={`${list.name} list logo`} />\n      ) : (\n        <div style={{ width: '24px', height: '24px', marginRight: '1rem' }} />\n      )}\n      <Column style={{ flex: '1' }}>\n        <Row>\n          <Text bold>{list.name}</Text>\n        </Row>\n        <RowFixed mt=\"4px\">\n          <Text fontSize=\"12px\" mr=\"6px\" textTransform=\"lowercase\">\n            {list.tokens.length} {t('Tokens')}\n          </Text>\n          <span ref={targetRef}>\n            <CogIcon color=\"text\" width=\"12px\" />\n          </span>\n        </RowFixed>\n      </Column>\n      <Toggle\n        checked={isActive}\n        onChange={() => {\n          if (isActive) {\n            handleDisableList()\n          } else {\n            handleEnableList()\n          }\n        }}\n      />\n    </RowWrapper>\n  )\n})\n\nconst ListContainer = styled.div`\n  padding: 1rem 0;\n  height: 100%;\n  overflow: auto;\n`\n\nfunction ManageLists({\n  setModalView,\n  setImportList,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [listUrlInput, setListUrlInput] = useState<string>('')\n\n  const { t } = useTranslation()\n\n  const lists = useAllLists()\n\n  // sort by active but only if not visible\n  const activeListUrls = useActiveListUrls()\n  const [activeCopy, setActiveCopy] = useState<string[] | undefined>()\n  useEffect(() => {\n    if (!activeCopy && activeListUrls) {\n      setActiveCopy(activeListUrls)\n    }\n  }, [activeCopy, activeListUrls])\n\n  const handleInput = useCallback((e) => {\n    setListUrlInput(e.target.value)\n  }, [])\n\n  const fetchList = useFetchListCallback()\n\n  const validUrl: boolean = useMemo(() => {\n    return uriToHttp(listUrlInput).length > 0 || Boolean(parseENSAddress(listUrlInput))\n  }, [listUrlInput])\n\n  const sortedLists = useMemo(() => {\n    const listUrls = Object.keys(lists)\n    return listUrls\n      .filter((listUrl) => {\n        // only show loaded lists, hide unsupported lists\n        return Boolean(lists[listUrl].current) && !UNSUPPORTED_LIST_URLS.includes(listUrl)\n      })\n      .sort((u1, u2) => {\n        const { current: l1 } = lists[u1]\n        const { current: l2 } = lists[u2]\n\n        // first filter on active lists\n        if (activeCopy?.includes(u1) && !activeCopy?.includes(u2)) {\n          return -1\n        }\n        if (!activeCopy?.includes(u1) && activeCopy?.includes(u2)) {\n          return 1\n        }\n\n        if (l1 && l2) {\n          return l1.name.toLowerCase() < l2.name.toLowerCase()\n            ? -1\n            : l1.name.toLowerCase() === l2.name.toLowerCase()\n            ? 0\n            : 1\n        }\n        if (l1) return -1\n        if (l2) return 1\n        return 0\n      })\n  }, [lists, activeCopy])\n\n  // temporary fetched list for import flow\n  const [tempList, setTempList] = useState<TokenList>()\n  const [addError, setAddError] = useState<string | undefined>()\n\n  useEffect(() => {\n    async function fetchTempList() {\n      fetchList(listUrlInput, false)\n        .then((list) => setTempList(list))\n        .catch(() => setAddError('Error importing list'))\n    }\n    // if valid url, fetch details for card\n    if (validUrl) {\n      fetchTempList()\n    } else {\n      setTempList(undefined)\n      if (listUrlInput !== '') {\n        setAddError('Enter valid list location')\n      }\n    }\n\n    // reset error\n    if (listUrlInput === '') {\n      setAddError(undefined)\n    }\n  }, [fetchList, listUrlInput, validUrl])\n\n  // check if list is already imported\n  const isImported = Object.keys(lists).includes(listUrlInput)\n\n  // set list values and have parent modal switch to import list view\n  const handleImport = useCallback(() => {\n    if (!tempList) return\n    setImportList(tempList)\n    setModalView(CurrencyModalView.importList)\n    setListUrl(listUrlInput)\n  }, [listUrlInput, setImportList, setListUrl, setModalView, tempList])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"14px\">\n        <Row>\n          <Input\n            id=\"list-add-input\"\n            scale=\"lg\"\n            placeholder={t('https:// or ipfs:// or ENS name')}\n            value={listUrlInput}\n            onChange={handleInput}\n          />\n        </Row>\n        {addError ? (\n          <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n            {addError}\n          </Text>\n        ) : null}\n      </AutoColumn>\n      {tempList && (\n        <AutoColumn style={{ paddingTop: 0 }}>\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {tempList.logoURI && <ListLogo logoURI={tempList.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"4px\" style={{ marginLeft: '20px' }}>\n                  <Text bold>{tempList.name}</Text>\n                  <Text color=\"textSubtle\" small textTransform=\"lowercase\">\n                    {tempList.tokens.length} {t('Tokens')}\n                  </Text>\n                </AutoColumn>\n              </RowFixed>\n              {isImported ? (\n                <RowFixed>\n                  <CheckmarkIcon width=\"16px\" mr=\"10px\" />\n                  <Text>{t('Loaded')}</Text>\n                </RowFixed>\n              ) : (\n                <Button width=\"fit-content\" onClick={handleImport}>\n                  {t('Import')}\n                </Button>\n              )}\n            </RowBetween>\n          </Card>\n        </AutoColumn>\n      )}\n      <ListContainer>\n        <AutoColumn gap=\"md\">\n          {sortedLists.map((listUrl) => (\n            <ListRow key={listUrl} listUrl={listUrl} />\n          ))}\n        </AutoColumn>\n      </ListContainer>\n    </Wrapper>\n  )\n}\n\nexport default ManageLists\n","import React, { useRef, RefObject, useCallback, useState, useMemo } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Text, Button, CloseIcon, IconButton, LinkExternal, Input, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Row, { RowBetween, RowFixed } from 'components/Layout/Row'\nimport { useToken } from 'hooks/Tokens'\nimport { useRemoveUserAddedToken } from 'state/user/hooks'\nimport useUserAddedTokens from 'state/user/hooks/useUserAddedTokens'\nimport { CurrencyLogo } from 'components/Logo'\nimport { getBscScanLink, isAddress } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport ImportRow from './ImportRow'\nimport { CurrencyModalView } from './types'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: calc(100% - 60px);\n  position: relative;\n  padding-bottom: 60px;\n`\n\nconst Footer = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport default function ManageTokens({\n  setModalView,\n  setImportToken,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n}) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n  }, [])\n\n  // if they input an address, use it\n  const searchToken = useToken(searchQuery)\n\n  // all tokens for local list\n  const userAddedTokens: Token[] = useUserAddedTokens()\n  const removeToken = useRemoveUserAddedToken()\n\n  const handleRemoveAll = useCallback(() => {\n    if (chainId && userAddedTokens) {\n      userAddedTokens.map((token) => {\n        return removeToken(chainId, token.address)\n      })\n    }\n  }, [removeToken, userAddedTokens, chainId])\n\n  const tokenList = useMemo(() => {\n    return (\n      chainId &&\n      userAddedTokens.map((token) => (\n        <RowBetween key={token.address} width=\"100%\">\n          <RowFixed>\n            <CurrencyLogo currency={token} size=\"20px\" />\n            <Link external href={getBscScanLink(token.address, 'address', chainId)} color=\"textSubtle\" ml=\"10px\">\n              {token.symbol}\n            </Link>\n          </RowFixed>\n          <RowFixed>\n            <IconButton variant=\"text\" onClick={() => removeToken(chainId, token.address)}>\n              <CloseIcon />\n            </IconButton>\n            <LinkExternal href={getBscScanLink(token.address, 'address', chainId)} />\n          </RowFixed>\n        </RowBetween>\n      ))\n    )\n  }, [userAddedTokens, chainId, removeToken])\n\n  const isAddressValid = searchQuery === '' || isAddress(searchQuery)\n\n  return (\n    <Wrapper>\n      <Column style={{ width: '100%', flex: '1 1' }}>\n        <AutoColumn gap=\"14px\">\n          <Row>\n            <Input\n              id=\"token-search-input\"\n              scale=\"lg\"\n              placeholder=\"0x0000\"\n              value={searchQuery}\n              autoComplete=\"off\"\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              isWarning={!isAddressValid}\n            />\n          </Row>\n          {!isAddressValid && <Text color=\"failure\">{t('Enter valid token address')}</Text>}\n          {searchToken && (\n            <ImportRow\n              token={searchToken}\n              showImportView={() => setModalView(CurrencyModalView.importToken)}\n              setImportToken={setImportToken}\n              style={{ height: 'fit-content' }}\n            />\n          )}\n        </AutoColumn>\n        {tokenList}\n        <Footer>\n          <Text bold color=\"textSubtle\">\n            {userAddedTokens?.length} {userAddedTokens.length === 1 ? t('Custom Token') : t('Custom Tokens')}\n          </Text>\n          {userAddedTokens.length > 0 && (\n            <Button variant=\"tertiary\" onClick={handleRemoveAll}>\n              {t('Clear all')}\n            </Button>\n          )}\n        </Footer>\n      </Column>\n    </Wrapper>\n  )\n}\n","import React, { useState } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { ButtonMenu, ButtonMenuItem, ModalBody } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport ManageLists from './ManageLists'\nimport ManageTokens from './ManageTokens'\nimport { CurrencyModalView } from './types'\n\nconst StyledButtonMenu = styled(ButtonMenu)`\n  width: 100%;\n`\n\nexport default function Manage({\n  setModalView,\n  setImportList,\n  setImportToken,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [showLists, setShowLists] = useState(true)\n\n  const { t } = useTranslation()\n\n  return (\n    <ModalBody>\n      <StyledButtonMenu\n        activeIndex={showLists ? 0 : 1}\n        onItemClick={() => setShowLists((prev) => !prev)}\n        scale=\"sm\"\n        variant=\"subtle\"\n        mb=\"32px\"\n      >\n        <ButtonMenuItem width=\"50%\">{t('Lists')}</ButtonMenuItem>\n        <ButtonMenuItem width=\"50%\">{t('Tokens')}</ButtonMenuItem>\n      </StyledButtonMenu>\n      {showLists ? (\n        <ManageLists setModalView={setModalView} setImportList={setImportList} setListUrl={setListUrl} />\n      ) : (\n        <ManageTokens setModalView={setModalView} setImportToken={setImportToken} />\n      )}\n    </ModalBody>\n  )\n}\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, Text, Link, Flex, Checkbox, Message } from '@pancakeswap/uikit'\nimport Card from 'components/Card'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport useTheme from 'hooks/useTheme'\nimport { ListLogo } from 'components/Logo'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from 'state'\nimport useFetchListCallback from 'hooks/useFetchListCallback'\nimport { removeList, enableList } from 'state/lists/actions'\nimport { useAllLists } from 'state/lists/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  listURL: string\n  list: TokenList\n  onImport: () => void\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nconst TextDot = styled.div`\n  height: 3px;\n  width: 3px;\n  background-color: ${({ theme }) => theme.colors.text};\n  border-radius: 50%;\n`\n\nfunction ImportList({ listURL, list, onImport }: ImportProps) {\n  const { theme } = useTheme()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const { t } = useTranslation()\n\n  // user must accept\n  const [confirmed, setConfirmed] = useState(false)\n\n  const lists = useAllLists()\n  const fetchList = useFetchListCallback()\n\n  // monitor is list is loading\n  const adding = Boolean(lists[listURL]?.loadingRequestId)\n  const [addError, setAddError] = useState<string | null>(null)\n\n  const handleAddList = useCallback(() => {\n    if (adding) return\n    setAddError(null)\n    fetchList(listURL)\n      .then(() => {\n        dispatch(enableList(listURL))\n        onImport()\n      })\n      .catch((error) => {\n        setAddError(error.message)\n        dispatch(removeList(listURL))\n      })\n  }, [adding, dispatch, fetchList, listURL, onImport])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"md\">\n        <AutoColumn gap=\"md\">\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {list.logoURI && <ListLogo logoURI={list.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"sm\" style={{ marginLeft: '20px' }}>\n                  <RowFixed>\n                    <Text bold mr=\"6px\">\n                      {list.name}\n                    </Text>\n                    <TextDot />\n                    <Text small color=\"textSubtle\" ml=\"6px\">\n                      {list.tokens.length} tokens\n                    </Text>\n                  </RowFixed>\n                  <Link\n                    small\n                    external\n                    ellipsis\n                    maxWidth=\"90%\"\n                    href={`https://tokenlists.org/token-list?url=${listURL}`}\n                  >\n                    {listURL}\n                  </Link>\n                </AutoColumn>\n              </RowFixed>\n            </RowBetween>\n          </Card>\n\n          <Message variant=\"danger\">\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"20px\" textAlign=\"center\" color={theme.colors.failure} mb=\"16px\">\n                {t('Import at your own risk')}\n              </Text>\n              <Text color={theme.colors.failure} mb=\"8px\">\n                {t(\n                  'By adding this list you are implicitly trusting that the data is correct. Anyone can create a list, including creating fake versions of existing lists and lists that claim to represent projects that do not have one.',\n                )}\n              </Text>\n              <Text bold color={theme.colors.failure} mb=\"16px\">\n                {typeof 'If you purchase a token from this list, you may not be able to sell it back.'}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Checkbox\n                  name=\"confirmed\"\n                  type=\"checkbox\"\n                  checked={confirmed}\n                  onChange={() => setConfirmed(!confirmed)}\n                  scale=\"sm\"\n                />\n                <Text ml=\"10px\" style={{ userSelect: 'none' }}>\n                  {t('I understand')}\n                </Text>\n              </Flex>\n            </Flex>\n          </Message>\n\n          <Button disabled={!confirmed} onClick={handleAddList}>\n            {t('Import')}\n          </Button>\n          {addError ? (\n            <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n              {addError}\n            </Text>\n          ) : null}\n        </AutoColumn>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nexport default ImportList\n","import React, { useCallback, useState } from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport {\n  ModalContainer,\n  ModalHeader,\n  ModalTitle,\n  ModalBackButton,\n  ModalCloseButton,\n  ModalBody,\n  InjectedModalProps,\n  Heading,\n  Button,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport usePrevious from 'hooks/usePreviousValue'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport CurrencySearch from './CurrencySearch'\nimport ImportToken from './ImportToken'\nimport Manage from './Manage'\nimport ImportList from './ImportList'\nimport { CurrencyModalView } from './types'\n\nconst Footer = styled.div`\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  text-align: center;\n`\n\nconst StyledModalContainer = styled(ModalContainer)`\n  max-width: 420px;\n  width: 100%;\n`\n\nconst StyledModalBody = styled(ModalBody)`\n  padding: 24px;\n  overflow-y: auto;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface CurrencySearchModalProps extends InjectedModalProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n}\n\nexport default function CurrencySearchModal({\n  onDismiss = () => null,\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases = false,\n}: CurrencySearchModalProps) {\n  const [modalView, setModalView] = useState<CurrencyModalView>(CurrencyModalView.search)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onDismiss()\n      onCurrencySelect(currency)\n    },\n    [onDismiss, onCurrencySelect],\n  )\n\n  // for token import view\n  const prevView = usePrevious(modalView)\n\n  // used for import token flow\n  const [importToken, setImportToken] = useState<Token | undefined>()\n\n  // used for import list\n  const [importList, setImportList] = useState<TokenList | undefined>()\n  const [listURL, setListUrl] = useState<string | undefined>()\n\n  const { t } = useTranslation()\n\n  const config = {\n    [CurrencyModalView.search]: { title: t('Select a Token'), onBack: undefined },\n    [CurrencyModalView.manage]: { title: t('Manage'), onBack: () => setModalView(CurrencyModalView.search) },\n    [CurrencyModalView.importToken]: {\n      title: t('Import Tokens'),\n      onBack: () =>\n        setModalView(prevView && prevView !== CurrencyModalView.importToken ? prevView : CurrencyModalView.search),\n    },\n    [CurrencyModalView.importList]: { title: t('Import List'), onBack: () => setModalView(CurrencyModalView.search) },\n  }\n\n  return (\n    <StyledModalContainer minWidth=\"320px\">\n      <ModalHeader>\n        <ModalTitle>\n          {config[modalView].onBack && <ModalBackButton onBack={config[modalView].onBack} />}\n          <Heading>{config[modalView].title}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <StyledModalBody>\n        {modalView === CurrencyModalView.search ? (\n          <CurrencySearch\n            onCurrencySelect={handleCurrencySelect}\n            selectedCurrency={selectedCurrency}\n            otherSelectedCurrency={otherSelectedCurrency}\n            showCommonBases={showCommonBases}\n            showImportView={() => setModalView(CurrencyModalView.importToken)}\n            setImportToken={setImportToken}\n          />\n        ) : modalView === CurrencyModalView.importToken && importToken ? (\n          <ImportToken tokens={[importToken]} handleCurrencySelect={handleCurrencySelect} />\n        ) : modalView === CurrencyModalView.importList && importList && listURL ? (\n          <ImportList list={importList} listURL={listURL} onImport={() => setModalView(CurrencyModalView.manage)} />\n        ) : modalView === CurrencyModalView.manage ? (\n          <Manage\n            setModalView={setModalView}\n            setImportToken={setImportToken}\n            setImportList={setImportList}\n            setListUrl={setListUrl}\n          />\n        ) : (\n          ''\n        )}\n        {modalView === CurrencyModalView.search && (\n          <Footer>\n            <Button\n              scale=\"sm\"\n              variant=\"text\"\n              onClick={() => setModalView(CurrencyModalView.manage)}\n              className=\"list-token-manage-button\"\n            >\n              {t('Manage Tokens')}\n            </Button>\n          </Footer>\n        )}\n      </StyledModalBody>\n    </StyledModalContainer>\n  )\n}\n"],"sourceRoot":""}