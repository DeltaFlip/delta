{"version":3,"sources":["components/CurrencyInputPanel/NumericalInput.tsx","components/CurrencyInputPanel/index.tsx","hooks/useTokenAllowance.ts","hooks/useApproveCallback.ts","hooks/useTransactionDeadline.ts","hooks/useCurrentBlockTimestamp.ts","components/UnsupportedCurrencyFooter.tsx","state/mint/hooks.ts","utils/maxAmountSpend.ts","views/AddLiquidity/ConfirmAddModalBottom.tsx","views/AddLiquidity/PoolPriceBar.tsx","views/AddLiquidity/index.tsx","components/TransactionConfirmationModal/index.tsx"],"names":["StyledInput","styled","input","error","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","React","memo","value","onUserInput","placeholder","rest","t","useTranslation","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","InputRow","div","selected","CurrencySelectButton","Button","attrs","variant","scale","LabelRow","InputPanel","backgroundAlt","Container","shadows","inset","CurrencyInputPanel","onMax","showMaxButton","label","onCurrencySelect","currency","disableCurrencySelect","hideBalance","pair","otherCurrency","id","showCommonBases","account","useActiveWeb3React","selectedCurrencyBalance","useCurrencyBalance","undefined","useModal","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","onPresentCurrencyModal","mb","alignItems","justifyContent","className","onClick","currency0","token0","currency1","token1","size","margin","style","marginRight","bold","symbol","length","slice","color","fontSize","display","cursor","balance","toSignificant","Row","val","useTokenAllowance","ApprovalState","token","owner","spender","contract","useTokenContract","address","inputs","useMemo","allowance","useSingleCallResult","result","TokenAmount","toString","useApproveCallback","amountToApprove","callWithGasPrice","useCallWithGasPrice","currentAllowance","pendingApproval","useHasPendingApproval","approvalState","ETHER","APPROVED","lessThan","PENDING","NOT_APPROVED","UNKNOWN","tokenContract","addTransaction","useTransactionAdder","approve","useCallback","a","console","useExact","estimateGas","MaxUint256","catch","raw","estimatedGas","gasLimit","calculateGasMargin","then","response","summary","approval","tokenAddress","logError","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useCurrentBlockTimestamp","add","DetailsFooter","invertedContrast","UnsupportedModal","currencies","onDismiss","chainId","tokens","map","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","maxWidth","gap","Object","keys","includes","external","small","href","getBscScanLink","concat","UnsupportedCurrencyFooter","onPresentModal","ZERO","JSBI","BigInt","useMintState","mint","maxAmountSpend","currencyAmount","greaterThan","MIN_BNB","CurrencyAmount","ether","subtract","ConfirmAddModalBottom","noLiquidity","price","parsedAmounts","poolTokenPercentage","onAdd","asset","Field","CURRENCY_A","CURRENCY_B","invert","mt","PoolPriceBar","justify","pt","assetA","assetB","ONE_BIPS","toFixed","AddLiquidity","match","params","currencyIdA","currencyIdB","history","library","dispatch","useDispatch","gasPrice","useGasPrice","currencyA","useCurrency","currencyB","useEffect","resetMintState","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","expertMode","useIsExpertMode","independentField","typedValue","otherTypedValue","dependentField","usePair","pairState","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","equal","balances","useCurrencyBalances","currencyBalances","independentAmount","tryParseAmount","dependentAmount","wrappedIndependentAmount","wrappedCurrencyAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","Percent","INVALID","useDerivedMintInfo","onFieldAInput","typeInput","field","onFieldBInput","useMintActionHandlers","isValid","useState","attemptingTxn","setAttemptingTxn","deadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","atMaxAmounts","equalTo","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","router","getRouterContract","parsedAmountA","parsedAmountB","calculateSlippageAmount","amountsMin","tokenBIsETH","estimate","addLiquidityETH","method","args","toHexString","BigNumber","from","addLiquidity","estimatedGasLimit","hash","err","code","modalHeader","textAlign","my","slippage","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","push","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","TransactionConfirmationModal","customOnDismiss","content","topContent","bottomContent","currencyToAdd","onPresentAddLiquidityModal","Page","App","subtitle","helper","backTo","Column","toExact","width","padding","borderRadius","disabled","Dots","ConnectWalletButton","minWidth","marginTop","showUnwrapped","Wrapper","Section","AutoColumn","ConfirmedIcon","ColumnCenter","ConfirmationPendingContent","TransactionSubmittedContent","strokeWidth","provider","isMetaMask","registerToken","decimals","ml","ConfirmationModalContent","handleDismiss","headerBackground"],"mappings":"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","file":"static/js/36.4186fd09.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  text-align: right;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React from 'react'\nimport { Currency, Pair } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, useModal, Flex, Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\n\nimport { RowBetween } from '../Layout/Row'\nimport { Input as NumericalInput } from './NumericalInput'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  justify-content: flex-end;\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\n`\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })`\n  padding: 0 0.5rem;\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n`\nconst InputPanel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-radius: '20px';\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  z-index: 1;\n`\nconst Container = styled.div`\n  border-radius: 16px;\n  background-color: ${({ theme }) => theme.colors.input};\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n`\ninterface CurrencyInputPanelProps {\n  value: string\n  onUserInput: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | null\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n}\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label,\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  otherCurrency,\n  id,\n  showCommonBases,\n}: CurrencyInputPanelProps) {\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n    />,\n  )\n  return (\n    <Box id={id}>\n      <Flex mb=\"6px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <CurrencySelectButton\n          className=\"open-currency-select-button\"\n          selected={!!currency}\n          onClick={() => {\n            if (!disableCurrencySelect) {\n              onPresentCurrencyModal()\n            }\n          }}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            {pair ? (\n              <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\n            ) : currency ? (\n              <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\n            ) : null}\n            {pair ? (\n              <Text id=\"pair\" bold>\n                {pair?.token0.symbol}:{pair?.token1.symbol}\n              </Text>\n            ) : (\n              <Text id=\"pair\" bold>\n                {(currency && currency.symbol && currency.symbol.length > 20\n                  ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                      currency.symbol.length - 5,\n                      currency.symbol.length,\n                    )}`\n                  : currency?.symbol) || t('Select a currency')}\n              </Text>\n            )}\n            {!disableCurrencySelect && <ChevronDownIcon />}\n          </Flex>\n        </CurrencySelectButton>\n        {account && (\n          <Text onClick={onMax} color=\"textSubtle\" fontSize=\"14px\" style={{ display: 'inline', cursor: 'pointer' }}>\n            {!hideBalance && !!currency\n              ? t('Balance: %balance%', { balance: selectedCurrencyBalance?.toSignificant(6) ?? t('Loading') })\n              : ' -'}\n          </Text>\n        )}\n      </Flex>\n      <InputPanel>\n        <Container>\n          <LabelRow>\n            <RowBetween>\n              <NumericalInput\n                className=\"token-amount-input\"\n                value={value}\n                onUserInput={(val) => {\n                  onUserInput(val)\n                }}\n              />\n            </RowBetween>\n          </LabelRow>\n          <InputRow selected={disableCurrencySelect}>\n            {account && currency && showMaxButton && label !== 'To' && (\n              <Button onClick={onMax} scale=\"xs\" variant=\"secondary\">\n                MAX\n              </Button>\n            )}\n          </InputRow>\n        </Container>\n      </InputPanel>\n    </Box>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\n    [token, allowance],\n  )\n}\n\nexport default useTokenAllowance\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { logError } from 'utils/sentry'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport useTokenAllowance from './useTokenAllowance'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    // eslint-disable-next-line consistent-return\n    return callWithGasPrice(\n      tokenContract,\n      'approve',\n      [spender, useExact ? amountToApprove.raw.toString() : MaxUint256],\n      {\n        gasLimit: calculateGasMargin(estimatedGas),\n      },\n    )\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          approval: { tokenAddress: token.address, spender },\n        })\n      })\n      .catch((error: Error) => {\n        logError(error)\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\n}\n","import { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from 'ethers'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import React from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<Props> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title=\"Unsupported Assets\" maxWidth=\"420px\" onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link external small color=\"primaryDark\" href={getBscScanLink(token.address, 'address', chainId)}>\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            Some assets are not available through this interface because they may not work well with our smart contract\n            or we are unable to allow trading for legal reasons.\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        Read more about unsupported assets\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { wrappedCurrency, wrappedCurrencyAmount } from 'utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId),\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    }\n    return undefined\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Invalid pair')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\nimport { MIN_BNB } from '../config/constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\n    }\n    return CurrencyAmount.ether(JSBI.BigInt(0))\n  }\n  return currencyAmount\n}\n\nexport default maxAmountSpend\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { Field } from '../../state/mint/actions'\n\nfunction ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  currencies,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd,\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  currencies: { [field in Field]?: Currency }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Rates')}</Text>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n            currencies[Field.CURRENCY_B]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n            currencies[Field.CURRENCY_A]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Share of Pool')}:</Text>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <Button onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n      </Button>\n    </>\n  )\n}\n\nexport default ConfirmAddModalBottom\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn } from '../../components/Layout/Column'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { ONE_BIPS } from '../../config/constants'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from '../../state'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { DoubleCurrencyLogo } from '../../components/Logo'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport { PairState } from '../../hooks/usePairs'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field, resetMintState } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom'\nimport { currencyId } from '../../utils/currencyId'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  useEffect(() => {\n    if (!currencyIdA && !currencyIdB) {\n      dispatch(resetMintState())\n    }\n  }, [dispatch, currencyIdA, currencyIdB])\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\n  )\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        }),\n      )\n      .catch((err) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (err?.code !== 4001) {\n          console.error(err)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"48px\" marginRight=\"10px\">\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n        </Text>\n        <DoubleCurrencyLogo\n          currency0={currencies[Field.CURRENCY_A]}\n          currency1={currencies[Field.CURRENCY_B]}\n          size={30}\n        />\n      </Flex>\n    ) : (\n      <AutoColumn>\n        <Flex alignItems=\"center\">\n          <Text fontSize=\"48px\" marginRight=\"10px\">\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </Flex>\n        <Row>\n          <Text fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </Text>\n        </Row>\n        <Text small textAlign=\"left\" my=\"24px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else if (currencyIdB) {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <TransactionConfirmationModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          title={t('Add Liquidity')}\n          subtitle={t('Add liquidity to receive LP tokens')}\n          helper={t(\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\n          )}\n          backTo=\"/pool\"\n        />\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <Message variant=\"warning\">\n                  <div>\n                    <Text bold mb=\"8px\">\n                      {t('You are the first liquidity provider.')}\n                    </Text>\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                  </div>\n                </Message>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <AddIcon width=\"16px\" />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <Text fontSize=\"14px\">\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                    </Text>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <Button disabled mb=\"4px\">\n                {t('Unsupported Asset')}\n              </Button>\n            ) : !account ? (\n              <ConnectWalletButton />\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    if (expertMode) {\n                      onAdd()\n                    } else {\n                      onPresentAddLiquidityModal()\n                    }\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                >\n                  {error ?? t('Supply')}\n                </Button>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </CardBody>\n      </AppBody>\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Text,\n  ErrorIcon,\n  ArrowUpIcon,\n  MetamaskIcon,\n  Flex,\n  Box,\n  Link,\n  Spinner,\n  Modal,\n  InjectedModalProps,\n} from '@pancakeswap/uikit'\nimport { registerToken } from 'utils/wallet'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { RowFixed } from '../Layout/Row'\nimport { AutoColumn, ColumnCenter } from '../Layout/Column'\nimport { getBscScanLink } from '../../utils'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\nconst Section = styled(AutoColumn)`\n  padding: 24px;\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`\n\nfunction ConfirmationPendingContent({ pendingText }: { pendingText: string }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <ConfirmedIcon>\n        <Spinner />\n      </ConfirmedIcon>\n      <AutoColumn gap=\"12px\" justify=\"center\">\n        <Text fontSize=\"20px\">{t('Waiting For Confirmation')}</Text>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text bold small textAlign=\"center\">\n            {pendingText}\n          </Text>\n        </AutoColumn>\n        <Text small color=\"textSubtle\" textAlign=\"center\">\n          {t('Confirm this transaction in your wallet')}\n        </Text>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nfunction TransactionSubmittedContent({\n  onDismiss,\n  chainId,\n  hash,\n  currencyToAdd,\n}: {\n  onDismiss: () => void\n  hash: string | undefined\n  chainId: ChainId\n  currencyToAdd?: Currency | undefined\n}) {\n  const { library } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  return (\n    <Wrapper>\n      <Section>\n        <ConfirmedIcon>\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\n        </ConfirmedIcon>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\n          {chainId && hash && (\n            <Link external small href={getBscScanLink(hash, 'transaction', chainId)}>\n              {t('View on BscScan')}\n            </Link>\n          )}\n          {currencyToAdd && library?.provider?.isMetaMask && (\n            <Button\n              variant=\"tertiary\"\n              mt=\"12px\"\n              width=\"fit-content\"\n              onClick={() => registerToken(token.address, token.symbol, token.decimals)}\n            >\n              <RowFixed>\n                {t('Add %asset% to Metamask', { asset: currencyToAdd.symbol })}\n                <MetamaskIcon width=\"16px\" ml=\"6px\" />\n              </RowFixed>\n            </Button>\n          )}\n          <Button onClick={onDismiss} mt=\"20px\">\n            {t('Close')}\n          </Button>\n        </AutoColumn>\n      </Section>\n    </Wrapper>\n  )\n}\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode\n  bottomContent: () => React.ReactNode\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  )\n}\n\nexport function TransactionErrorContent({ message, onDismiss }: { message: string; onDismiss: () => void }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <AutoColumn justify=\"center\">\n        <ErrorIcon color=\"failure\" width=\"64px\" />\n        <Text color=\"failure\" style={{ textAlign: 'center', width: '85%' }}>\n          {message}\n        </Text>\n      </AutoColumn>\n\n      <Flex justifyContent=\"center\" pt=\"24px\">\n        <Button onClick={onDismiss}>{t('Dismiss')}</Button>\n      </Flex>\n    </Wrapper>\n  )\n}\n\ninterface ConfirmationModalProps {\n  title: string\n  customOnDismiss?: () => void\n  hash: string | undefined\n  content: () => React.ReactNode\n  attemptingTxn: boolean\n  pendingText: string\n  currencyToAdd?: Currency | undefined\n}\n\nconst TransactionConfirmationModal: React.FC<InjectedModalProps & ConfirmationModalProps> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  content,\n  currencyToAdd,\n}) => {\n  const { chainId } = useActiveWeb3React()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss()\n  }, [customOnDismiss, onDismiss])\n\n  if (!chainId) return null\n\n  return (\n    <Modal title={title} headerBackground=\"gradients.cardHeader\" onDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : hash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={hash}\n          onDismiss={onDismiss}\n          currencyToAdd={currencyToAdd}\n        />\n      ) : (\n        content()\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionConfirmationModal\n"],"sourceRoot":""}