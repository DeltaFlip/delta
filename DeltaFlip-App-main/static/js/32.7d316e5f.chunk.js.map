{"version":3,"sources":["components/CurrencyInputPanel/NumericalInput.tsx","components/CurrencyInputPanel/index.tsx","hooks/useTokenAllowance.ts","hooks/useApproveCallback.ts","hooks/useTransactionDeadline.ts","hooks/useCurrentBlockTimestamp.ts","state/burn/hooks.ts","views/RemoveLiquidity/index.tsx","hooks/useDebouncedChangeHandler.ts","components/TransactionConfirmationModal/index.tsx","components/Links/index.tsx"],"names":["StyledInput","styled","input","error","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","React","memo","value","onUserInput","placeholder","rest","t","useTranslation","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","InputRow","div","selected","CurrencySelectButton","Button","attrs","variant","scale","LabelRow","InputPanel","backgroundAlt","Container","shadows","inset","CurrencyInputPanel","onMax","showMaxButton","label","onCurrencySelect","currency","disableCurrencySelect","hideBalance","pair","otherCurrency","id","showCommonBases","account","useActiveWeb3React","selectedCurrencyBalance","useCurrencyBalance","undefined","useModal","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","onPresentCurrencyModal","mb","alignItems","justifyContent","className","onClick","currency0","token0","currency1","token1","size","margin","style","marginRight","bold","symbol","length","slice","color","fontSize","display","cursor","balance","toSignificant","Row","val","useTokenAllowance","ApprovalState","token","owner","spender","contract","useTokenContract","address","inputs","useMemo","allowance","useSingleCallResult","result","TokenAmount","toString","useApproveCallback","amountToApprove","callWithGasPrice","useCallWithGasPrice","currentAllowance","pendingApproval","useHasPendingApproval","approvalState","ETHER","APPROVED","lessThan","PENDING","NOT_APPROVED","UNKNOWN","tokenContract","addTransaction","useTransactionAdder","approve","useCallback","a","console","useExact","estimateGas","MaxUint256","catch","raw","estimatedGas","gasLimit","calculateGasMargin","then","response","summary","approval","tokenAddress","logError","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useCurrentBlockTimestamp","add","useBurnState","burn","BorderCard","cardBorder","RemoveLiquidity","history","match","params","currencyIdA","currencyIdB","currencyA","useCurrency","currencyB","chainId","library","wrappedCurrency","tokenA","tokenB","gasPrice","useGasPrice","independentField","typedValue","usePair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","parsedAmounts","multiply","quotient","useDerivedBurnInfo","_onUserInput","dispatch","useDispatch","field","typeInput","useBurnActionHandlers","isValid","useState","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useUserSlippageTolerance","allowedSlippage","formattedAmounts","equalTo","toFixed","atMaxAmount","pairContract","usePairContract","signatureData","setSignatureData","ROUTER_ADDRESS","approveCallback","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","domain","version","verifyingContract","Permit","message","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","splitSignature","signature","v","r","s","err","code","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","onRemove","currencyAmountA","currencyAmountB","router","getRouterContract","calculateSlippageAmount","amountsMin","currencyBIsETH","oneCurrencyIsETH","methodNames","args","Promise","all","map","methodName","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","hash","modalHeader","gap","ml","width","small","textAlign","pt","slippage","modalBottom","assetA","assetB","priceOf","disabled","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","debouncedMs","inner","setInner","timer","useRef","onChangeInner","newValue","current","clearTimeout","setTimeout","useEffect","useDebouncedChangeHandler","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","TransactionConfirmationModal","customOnDismiss","content","topContent","bottomContent","onPresentRemoveLiquidity","Page","App","backTo","subtitle","noConfig","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","Column","my","textTransform","to","marginTop","position","mt","mr","Dots","ConnectWalletButton","minWidth","maxWidth","showUnwrapped","Wrapper","Section","AutoColumn","ConfirmedIcon","ColumnCenter","ConfirmationPendingContent","justify","TransactionSubmittedContent","onDismiss","currencyToAdd","strokeWidth","external","href","getBscScanLink","provider","isMetaMask","registerToken","decimals","asset","ConfirmationModalContent","handleDismiss","headerBackground","StyledInternalLink","Link","primary"],"mappings":"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","file":"static/js/32.7d316e5f.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  text-align: right;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React from 'react'\nimport { Currency, Pair } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, useModal, Flex, Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\n\nimport { RowBetween } from '../Layout/Row'\nimport { Input as NumericalInput } from './NumericalInput'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  justify-content: flex-end;\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\n`\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })`\n  padding: 0 0.5rem;\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n`\nconst InputPanel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-radius: '20px';\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  z-index: 1;\n`\nconst Container = styled.div`\n  border-radius: 16px;\n  background-color: ${({ theme }) => theme.colors.input};\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n`\ninterface CurrencyInputPanelProps {\n  value: string\n  onUserInput: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | null\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n}\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label,\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  otherCurrency,\n  id,\n  showCommonBases,\n}: CurrencyInputPanelProps) {\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n    />,\n  )\n  return (\n    <Box id={id}>\n      <Flex mb=\"6px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <CurrencySelectButton\n          className=\"open-currency-select-button\"\n          selected={!!currency}\n          onClick={() => {\n            if (!disableCurrencySelect) {\n              onPresentCurrencyModal()\n            }\n          }}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            {pair ? (\n              <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\n            ) : currency ? (\n              <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\n            ) : null}\n            {pair ? (\n              <Text id=\"pair\" bold>\n                {pair?.token0.symbol}:{pair?.token1.symbol}\n              </Text>\n            ) : (\n              <Text id=\"pair\" bold>\n                {(currency && currency.symbol && currency.symbol.length > 20\n                  ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                      currency.symbol.length - 5,\n                      currency.symbol.length,\n                    )}`\n                  : currency?.symbol) || t('Select a currency')}\n              </Text>\n            )}\n            {!disableCurrencySelect && <ChevronDownIcon />}\n          </Flex>\n        </CurrencySelectButton>\n        {account && (\n          <Text onClick={onMax} color=\"textSubtle\" fontSize=\"14px\" style={{ display: 'inline', cursor: 'pointer' }}>\n            {!hideBalance && !!currency\n              ? t('Balance: %balance%', { balance: selectedCurrencyBalance?.toSignificant(6) ?? t('Loading') })\n              : ' -'}\n          </Text>\n        )}\n      </Flex>\n      <InputPanel>\n        <Container>\n          <LabelRow>\n            <RowBetween>\n              <NumericalInput\n                className=\"token-amount-input\"\n                value={value}\n                onUserInput={(val) => {\n                  onUserInput(val)\n                }}\n              />\n            </RowBetween>\n          </LabelRow>\n          <InputRow selected={disableCurrencySelect}>\n            {account && currency && showMaxButton && label !== 'To' && (\n              <Button onClick={onMax} scale=\"xs\" variant=\"secondary\">\n                MAX\n              </Button>\n            )}\n          </InputRow>\n        </Container>\n      </InputPanel>\n    </Box>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\n    [token, allowance],\n  )\n}\n\nexport default useTokenAllowance\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { logError } from 'utils/sentry'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport useTokenAllowance from './useTokenAllowance'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    // eslint-disable-next-line consistent-return\n    return callWithGasPrice(\n      tokenContract,\n      'approve',\n      [spender, useExact ? amountToApprove.raw.toString() : MaxUint256],\n      {\n        gasLimit: calculateGasMargin(estimatedGas),\n      },\n    )\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          approval: { tokenAddress: token.address, spender },\n        })\n      })\n      .catch((error: Error) => {\n        logError(error)\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\n}\n","import { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from 'ethers'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\nimport { LightGreyCard } from '../../components/Card'\n\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { usePairContract } from '../../hooks/useContract'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { currencyId } from '../../utils/currencyId'\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\nimport Dots from '../../components/Loader/Dots'\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\n\nimport { Field } from '../../state/burn/actions'\nimport { useGasPrice, useUserSlippageTolerance } from '../../state/user/hooks'\nimport Page from '../Page'\n\nconst BorderCard = styled.div`\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n  padding: 16px;\n`\n\nexport default function RemoveLiquidity({\n  history,\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\n  const { account, chainId, library } = useActiveWeb3React()\n  const [tokenA, tokenB] = useMemo(\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\n    [currencyA, currencyB, chainId],\n  )\n\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const deadline = useTransactionDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_A]:\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_B]:\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\n\n  // allowance handling\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    // try to gather a signature for permission\n    const nonce = await pairContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ]\n    const domain = {\n      name: 'Pancake LPs',\n      version: '1',\n      chainId,\n      verifyingContract: pair.liquidityToken.address,\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ]\n    const message = {\n      owner: account,\n      spender: ROUTER_ADDRESS,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber(),\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then((signature) => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadline.toNumber(),\n        })\n      })\n      .catch((err) => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (err?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, value: string) => {\n      setSignatureData(null)\n      return _onUserInput(field, value)\n    },\n    [_onUserInput],\n  )\n\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n  async function onRemove() {\n    if (!chainId || !library || !account || !deadline) throw new Error('missing dependencies')\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\n    if (!currencyAmountA || !currencyAmountB) {\n      throw new Error('missing currency amounts')\n    }\n    const router = getRouterContract(chainId, library, account)\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\n    }\n\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    const currencyBIsETH = currencyB === ETHER\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\n\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\n\n    let methodNames: string[]\n    let args: Array<string | string[] | number | boolean>\n    // we have approval, use normal remove liquidity\n    if (approval === ApprovalState.APPROVED) {\n      // removeLiquidityETH\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n      // removeLiquidity\n      else {\n        methodNames = ['removeLiquidity']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n    }\n    // we have a signature, use permit versions of remove liquidity\n    else if (signatureData !== null) {\n      // removeLiquidityETHWithPermit\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n      // removeLiquidityETHWithPermit\n      else {\n        methodNames = ['removeLiquidityWithPermit']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n    } else {\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\n    }\n\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\n      methodNames.map((methodName) =>\n        router.estimateGas[methodName](...args)\n          .then(calculateGasMargin)\n          .catch((err) => {\n            console.error(`estimateGas failed`, methodName, args, err)\n            return undefined\n          }),\n      ),\n    )\n\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\n      BigNumber.isBigNumber(safeGasEstimate),\n    )\n\n    // all estimations failed...\n    if (indexOfSuccessfulEstimation === -1) {\n      console.error('This transaction would fail. Please contact support.')\n    } else {\n      const methodName = methodNames[indexOfSuccessfulEstimation]\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\n\n      setAttemptingTxn(true)\n      await router[methodName](...args, {\n        gasLimit: safeGasEstimate,\n        gasPrice,\n      })\n        .then((response: TransactionResponse) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencyA?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        })\n        .catch((err: Error) => {\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          console.error(err)\n        })\n    }\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\">\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyA?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <AddIcon width=\"16px\" />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyB?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <Text small textAlign=\"left\" pt=\"12px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          <Text>\n            {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\n          </Text>\n          <RowFixed>\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\n          </RowFixed>\n        </RowBetween>\n        {pair && (\n          <>\n            <RowBetween>\n              <Text>{t('Price')}</Text>\n              <Text>\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text>\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          {t('Confirm')}\n        </Button>\n      </>\n    )\n  }\n\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencyA?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencyB?.symbol ?? '',\n  })\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput],\n  )\n\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\n  )\n\n  const handleSelectCurrencyA = useCallback(\n    (currency: Currency) => {\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\n      } else {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n  const handleSelectCurrencyB = useCallback(\n    (currency: Currency) => {\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\n      } else {\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\n    }\n    setTxHash('')\n  }, [onUserInput, txHash])\n\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\n    liquidityPercentChangeCallback,\n  )\n\n  const [onPresentRemoveLiquidity] = useModal(\n    <TransactionConfirmationModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash || ''}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n    />,\n    true,\n    true,\n    'removeLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          backTo=\"/pool\"\n          title={t('Remove %assetA%-%assetB% liquidity', {\n            assetA: currencyA?.symbol ?? '',\n            assetB: currencyB?.symbol ?? '',\n          })}\n          subtitle={t('To receive %assetA% and %assetB%', {\n            assetA: currencyA?.symbol ?? '',\n            assetB: currencyB?.symbol ?? '',\n          })}\n          noConfig\n        />\n\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            <RowBetween>\n              <Text>{t('Amount')}</Text>\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\n                {showDetailed ? t('Simple') : t('Detailed')}\n              </Button>\n            </RowBetween>\n            {!showDetailed && (\n              <BorderCard>\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                </Text>\n                <Slider\n                  name=\"lp-amount\"\n                  min={0}\n                  max={100}\n                  value={innerLiquidityPercentage}\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\n                  mb=\"16px\"\n                />\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\n                    25%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\n                    50%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\n                    75%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\n                    Max\n                  </Button>\n                </Flex>\n              </BorderCard>\n            )}\n          </AutoColumn>\n          {!showDetailed && (\n            <>\n              <ColumnCenter>\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <AutoColumn gap=\"10px\">\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                  {t('You will receive')}\n                </Text>\n                <LightGreyCard>\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyA} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\n                        {currencyA?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\n                  </Flex>\n                  <Flex justifyContent=\"space-between\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyB} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\n                        {currencyB?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\n                  </Flex>\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\n                      {oneCurrencyIsETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\n                          }`}\n                        >\n                          {t('Receive WBNB')}\n                        </StyledInternalLink>\n                      ) : oneCurrencyIsWETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\n                          }`}\n                        >\n                          {t('Receive BNB')}\n                        </StyledInternalLink>\n                      ) : null}\n                    </RowBetween>\n                  ) : null}\n                </LightGreyCard>\n              </AutoColumn>\n            </>\n          )}\n\n          {showDetailed && (\n            <Box my=\"16px\">\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.LIQUIDITY]}\n                onUserInput={onLiquidityInput}\n                onMax={() => {\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                }}\n                showMaxButton={!atMaxAmount}\n                disableCurrencySelect\n                currency={pair?.liquidityToken}\n                pair={pair}\n                id=\"liquidity-amount\"\n                onCurrencySelect={() => null}\n              />\n              <ColumnCenter>\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onCurrencyAInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyA}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyA}\n                id=\"remove-liquidity-tokena\"\n              />\n              <ColumnCenter>\n                <AddIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onCurrencyBInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyB}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyB}\n                id=\"remove-liquidity-tokenb\"\n              />\n            </Box>\n          )}\n          {pair && (\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Prices')}\n              </Text>\n              <LightGreyCard>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyA?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n                  </Text>\n                </Flex>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyB?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n                  </Text>\n                </Flex>\n              </LightGreyCard>\n            </AutoColumn>\n          )}\n          <Box position=\"relative\" mt=\"16px\">\n            {!account ? (\n              <ConnectWalletButton />\n            ) : (\n              <RowBetween>\n                <Button\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\n                  onClick={onAttemptToApprove}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                  width=\"100%\"\n                  mr=\"0.5rem\"\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>{t('Enabling')}</Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    t('Enabled')\n                  ) : (\n                    t('Enable')\n                  )}\n                </Button>\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    onPresentRemoveLiquidity()\n                  }}\n                  width=\"100%\"\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                >\n                  {error || t('Remove')}\n                </Button>\n              </RowBetween>\n            )}\n          </Box>\n        </CardBody>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\nexport default function useDebouncedChangeHandler<T>(\n  value: T,\n  onChange: (newValue: T) => void,\n  debouncedMs = 100,\n): [T, (value: T) => void] {\n  const [inner, setInner] = useState<T>(() => value)\n  const timer = useRef<ReturnType<typeof setTimeout>>()\n\n  const onChangeInner = useCallback(\n    (newValue: T) => {\n      setInner(newValue)\n      if (timer.current) {\n        clearTimeout(timer.current)\n      }\n      timer.current = setTimeout(() => {\n        onChange(newValue)\n        timer.current = undefined\n      }, debouncedMs)\n    },\n    [debouncedMs, onChange],\n  )\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n      timer.current = undefined\n    }\n    setInner(value)\n  }, [value])\n\n  return [inner, onChangeInner]\n}\n","import React, { useCallback } from 'react'\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Text,\n  ErrorIcon,\n  ArrowUpIcon,\n  MetamaskIcon,\n  Flex,\n  Box,\n  Link,\n  Spinner,\n  Modal,\n  InjectedModalProps,\n} from '@pancakeswap/uikit'\nimport { registerToken } from 'utils/wallet'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { RowFixed } from '../Layout/Row'\nimport { AutoColumn, ColumnCenter } from '../Layout/Column'\nimport { getBscScanLink } from '../../utils'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\nconst Section = styled(AutoColumn)`\n  padding: 24px;\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`\n\nfunction ConfirmationPendingContent({ pendingText }: { pendingText: string }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <ConfirmedIcon>\n        <Spinner />\n      </ConfirmedIcon>\n      <AutoColumn gap=\"12px\" justify=\"center\">\n        <Text fontSize=\"20px\">{t('Waiting For Confirmation')}</Text>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text bold small textAlign=\"center\">\n            {pendingText}\n          </Text>\n        </AutoColumn>\n        <Text small color=\"textSubtle\" textAlign=\"center\">\n          {t('Confirm this transaction in your wallet')}\n        </Text>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nfunction TransactionSubmittedContent({\n  onDismiss,\n  chainId,\n  hash,\n  currencyToAdd,\n}: {\n  onDismiss: () => void\n  hash: string | undefined\n  chainId: ChainId\n  currencyToAdd?: Currency | undefined\n}) {\n  const { library } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  return (\n    <Wrapper>\n      <Section>\n        <ConfirmedIcon>\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\n        </ConfirmedIcon>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\n          {chainId && hash && (\n            <Link external small href={getBscScanLink(hash, 'transaction', chainId)}>\n              {t('View on BscScan')}\n            </Link>\n          )}\n          {currencyToAdd && library?.provider?.isMetaMask && (\n            <Button\n              variant=\"tertiary\"\n              mt=\"12px\"\n              width=\"fit-content\"\n              onClick={() => registerToken(token.address, token.symbol, token.decimals)}\n            >\n              <RowFixed>\n                {t('Add %asset% to Metamask', { asset: currencyToAdd.symbol })}\n                <MetamaskIcon width=\"16px\" ml=\"6px\" />\n              </RowFixed>\n            </Button>\n          )}\n          <Button onClick={onDismiss} mt=\"20px\">\n            {t('Close')}\n          </Button>\n        </AutoColumn>\n      </Section>\n    </Wrapper>\n  )\n}\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode\n  bottomContent: () => React.ReactNode\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  )\n}\n\nexport function TransactionErrorContent({ message, onDismiss }: { message: string; onDismiss: () => void }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <AutoColumn justify=\"center\">\n        <ErrorIcon color=\"failure\" width=\"64px\" />\n        <Text color=\"failure\" style={{ textAlign: 'center', width: '85%' }}>\n          {message}\n        </Text>\n      </AutoColumn>\n\n      <Flex justifyContent=\"center\" pt=\"24px\">\n        <Button onClick={onDismiss}>{t('Dismiss')}</Button>\n      </Flex>\n    </Wrapper>\n  )\n}\n\ninterface ConfirmationModalProps {\n  title: string\n  customOnDismiss?: () => void\n  hash: string | undefined\n  content: () => React.ReactNode\n  attemptingTxn: boolean\n  pendingText: string\n  currencyToAdd?: Currency | undefined\n}\n\nconst TransactionConfirmationModal: React.FC<InjectedModalProps & ConfirmationModalProps> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  content,\n  currencyToAdd,\n}) => {\n  const { chainId } = useActiveWeb3React()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss()\n  }, [customOnDismiss, onDismiss])\n\n  if (!chainId) return null\n\n  return (\n    <Modal title={title} headerBackground=\"gradients.cardHeader\" onDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : hash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={hash}\n          onDismiss={onDismiss}\n          currencyToAdd={currencyToAdd}\n        />\n      ) : (\n        content()\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionConfirmationModal\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}